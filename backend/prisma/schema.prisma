datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum mediaType {
  image
  video
}

enum sectionTypes {
  text
  image
  video
}

enum courseTypeEnum {
  softwareSolution
  hardwareAndSoftwareComplex
  initiativeOfTheRegion
  technology
  service
  notDefined
  hardwareSolution
}

model User {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  city             String?         @db.VarChar(512)
  shortDescription String?         @db.VarChar(512)
  email            String          @unique @db.VarChar(512)
  role             String          @default("administrator")
  login            String          @unique @db.VarChar(512)
  password         String          @db.VarChar(512)
  firstname        String          @db.VarChar(512)
  lastname         String          @db.VarChar(512)
  bio              String?         @db.Text
  avatar           Media?          @relation(fields: [avatarId], references: [id])
  avatarId         Int?            @default(1)
  tokenVersion     Int?
  groupAdmins      MessagerGroup[] @relation(name: "admin")
  publishedEvent   Event[]
  groups           MessagerGroup[]
  messages         Message[]
  StreamMessage    StreamMessage[]
  courses          Course[]
  testPasses  TestPass[]
}

model Course {
  id                   Int              @id @default(autoincrement())
  createdAt            DateTime         @default(now())
  name                 String           @db.VarChar(512)
  poster               Media?           @relation("Poster", fields: [posterId], references: [id])
  posterId             Int?
  courseMedia          Media[]          @relation("courseMedia")
  description          Article?         @relation(name: "courseArticle")
  shortDescription     String           @db.Text
  ownerId              Int
  owner                User             @relation(fields: [ownerId], references: [id])
  publishedPosts       Post[]
  platformConfigShowed PlatformConfig[]
  courseType           courseTypeEnum?
  Media                Media[]          @relation("Media")

  @@map("course")
}

model Test {
  id  Int @id @default(autoincrement())

  name  String

  tasks Task[]

  testPasses  TestPass[]
}

model TestPass  {
  id  Int  @id  @default(autoincrement())

  userId  Int
  user  User  @relation(references: [id], fields: [userId])

  testId  Int
  test  Test @relation(references: [id], fields: [testId])

  score Float
}

model Task {
  id  Int @id @default(autoincrement())

  question  String
  rightAnswer String
  answers String[]

  cost  Float @default(1.0)
  
  testId  Int
  test  Test @relation(fields: [testId], references: [id])
}

model Post {
  id                         Int              @id @default(autoincrement())
  createdAt                  DateTime         @default(now())
  isNews                     Boolean          @default(false)
  title                      String           @db.VarChar(512)
  poster                     Media?           @relation(name: "Post", fields: [posterId], references: [id])
  posterId                   Int?             @default(1)
  postMedia                  Media[]          @relation("postMedia")
  tags                       String[]         @db.VarChar(512)
  articleBody                String?          @db.Text
  description                String           @db.Text
  course                     Course?          @relation(fields: [courseID], references: [id])
  courseID                   Int?
  authorID                   Int?
  platformConfigNewsShowed   PlatformConfig[] @relation(name: "newsOnLanding")
  platformConfigOffersShowed PlatformConfig[] @relation(name: "offersOnLanding")
  article                    Article?         @relation("Article")
}

model Article {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  post      Post?     @relation(name: "Article", fields: [postID], references: [id], onDelete: Cascade)
  postID    Int?      @unique
  sections  Section[]
  cfId      Int?      @unique
  course    Course?   @relation(name: "courseArticle", fields: [courseId], references: [id], onDelete: Cascade)
  courseId  Int?      @unique
}

model Section {
  id        Int          @id @default(autoincrement())
  article   Article      @relation(fields: [articleID], references: [id], onDelete: Cascade)
  articleID Int
  number    Int
  type      sectionTypes
  text      String?      @db.Text
  media     Media?       @relation(fields: [mediaID], references: [id])
  mediaID   Int?
}

model Event {
  id                   Int                  @id @default(autoincrement())
  name                 String               @db.VarChar(512)
  poster               Media?               @relation(fields: [posterId], references: [id])
  posterId             Int?                 @default(1)
  description          String               @db.Text
  shortDescription     String               @db.Text
  date                 DateTime
  organizer            String               @db.VarChar(512)
  theme                String               @db.VarChar(512)
  address              String               @db.VarChar(512)
  format               String?              @db.VarChar(512)
  platformConfigShowed PlatformConfig[]
  user                 User?                @relation(fields: [userId], references: [id])
  userId               Int?
  stream               Stream?
  registeredForEvent   RegisteredForEvent[]
}

model RegisteredForEvent {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(512)
  surname String @db.VarChar(512)
  email   String @db.VarChar(512)
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int
}

model Stream {
  id            Int             @id @default(autoincrement())
  eventId       Int?            @unique
  event         Event?          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  streamKey     String          @unique @default(uuid())
  active        Boolean         @default(false)
  streamMessage StreamMessage[]
}

model Media {
  id                  Int             @id @default(autoincrement())
  createdAt           DateTime?       @default(now())
  url                 String          @unique @db.VarChar(512)
  type                mediaType
  isApproved          Boolean         @default(false)
  event               Event[]
  post                Post[]          @relation(name: "Post")
  coursePoster        Course[]        @relation(name: "Poster")
  courseMedia         Course?         @relation(name: "Media", fields: [courseMediaId], references: [id])
  courseMediaId       Int?
  user                User[]
  postMedia           Post?           @relation("postMedia", fields: [postMediaId], references: [id])
  postMediaId         Int?
  section             Section[]
  messagerGroup       MessagerGroup[]
  courseDescripiton   Course?         @relation(name: "courseMedia", fields: [courseDescriptionId], references: [id])
  courseDescriptionId Int?
}

model PlatformConfig {
  id                         Int      @id @default(autoincrement())
  createdAt                  DateTime @default(now())
  totalcourseCount           Int
  totalCompanyCount          Int
  totalBudgetInvestment      Int
  totalExtraBudgetInvestment Int
  platformTagline            String   @db.Text
  platformTitle              String   @db.Text
  platformDescription        String   @db.Text
  platformShortDescription   String   @db.Text
  newsShownOnLanding         Post[]   @relation(name: "newsOnLanding")
  offersShownOnLanding       Post[]   @relation(name: "offersOnLanding")
  coursesShownOnLanding      Course[]
  eventsShownOnLanding       Event[]
}

model Message {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  text      String        @db.Text
  sender    User          @relation(fields: [senderId], references: [id])
  senderId  Int
  group     MessagerGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   Int
}

model MessagerGroup {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  title     String    @db.VarChar(512)
  type      String
  avatar    Media?    @relation(fields: [avatarId], references: [id])
  avatarId  Int?
  inviteURL String?   @unique @db.VarChar(512)
  members   User[]
  messages  Message[]
  admins    User[]    @relation("admin")
}

model StreamMessage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  text      String   @db.Text
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  Int
  stream    Stream   @relation(fields: [streamId], references: [id])
  streamId  Int
}
