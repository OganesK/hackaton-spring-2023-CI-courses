### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Article {
  course: Course
  createdAt: DateTime!
  id: Int!
  post: Post
  sections(after: SectionWhereUniqueInput, before: SectionWhereUniqueInput, first: Int, last: Int, orderBy: [ArticleSectionsOrderByInput!]): [Section!]!
}

input ArticleCreateNestedOneWithoutCourseInput {
  connect: ArticleWhereUniqueInput
  connectOrCreate: ArticleCreateOrConnectWithoutCourseInput
  create: ArticleCreateWithoutCourseInput
}

input ArticleCreateNestedOneWithoutPostInput {
  connect: ArticleWhereUniqueInput
  connectOrCreate: ArticleCreateOrConnectWithoutPostInput
  create: ArticleCreateWithoutPostInput
}

input ArticleCreateNestedOneWithoutSectionsInput {
  connect: ArticleWhereUniqueInput
  connectOrCreate: ArticleCreateOrConnectWithoutSectionsInput
  create: ArticleCreateWithoutSectionsInput
}

input ArticleCreateOrConnectWithoutCourseInput {
  create: ArticleCreateWithoutCourseInput!
  where: ArticleWhereUniqueInput!
}

input ArticleCreateOrConnectWithoutPostInput {
  create: ArticleCreateWithoutPostInput!
  where: ArticleWhereUniqueInput!
}

input ArticleCreateOrConnectWithoutSectionsInput {
  create: ArticleCreateWithoutSectionsInput!
  where: ArticleWhereUniqueInput!
}

input ArticleCreateWithoutCourseInput {
  cfId: Int
  createdAt: DateTime
  post: PostCreateNestedOneWithoutArticleInput
  sections: SectionCreateNestedManyWithoutArticleInput
}

input ArticleCreateWithoutPostInput {
  cfId: Int
  course: CourseCreateNestedOneWithoutDescriptionInput
  createdAt: DateTime
  sections: SectionCreateNestedManyWithoutArticleInput
}

input ArticleCreateWithoutSectionsInput {
  cfId: Int
  course: CourseCreateNestedOneWithoutDescriptionInput
  createdAt: DateTime
  post: PostCreateNestedOneWithoutArticleInput
}

input ArticleOrderByWithRelationInput {
  cfId: SortOrder
  course: CourseOrderByWithRelationInput
  courseId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  post: PostOrderByWithRelationInput
  postID: SortOrder
  sections: SectionOrderByRelationAggregateInput
}

input ArticleSectionsOrderByInput {
  number: SortOrder
}

input ArticleUpdateOneRequiredWithoutSectionsInput {
  connect: ArticleWhereUniqueInput
  connectOrCreate: ArticleCreateOrConnectWithoutSectionsInput
  create: ArticleCreateWithoutSectionsInput
  update: ArticleUpdateWithoutSectionsInput
  upsert: ArticleUpsertWithoutSectionsInput
}

input ArticleUpdateOneWithoutCourseInput {
  connect: ArticleWhereUniqueInput
  connectOrCreate: ArticleCreateOrConnectWithoutCourseInput
  create: ArticleCreateWithoutCourseInput
  delete: Boolean
  disconnect: Boolean
  update: ArticleUpdateWithoutCourseInput
  upsert: ArticleUpsertWithoutCourseInput
}

input ArticleUpdateOneWithoutPostInput {
  connect: ArticleWhereUniqueInput
  connectOrCreate: ArticleCreateOrConnectWithoutPostInput
  create: ArticleCreateWithoutPostInput
  delete: Boolean
  disconnect: Boolean
  update: ArticleUpdateWithoutPostInput
  upsert: ArticleUpsertWithoutPostInput
}

input ArticleUpdateWithoutCourseInput {
  cfId: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneWithoutArticleInput
  sections: SectionUpdateManyWithoutArticleInput
}

input ArticleUpdateWithoutPostInput {
  cfId: NullableIntFieldUpdateOperationsInput
  course: CourseUpdateOneWithoutDescriptionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  sections: SectionUpdateManyWithoutArticleInput
}

input ArticleUpdateWithoutSectionsInput {
  cfId: NullableIntFieldUpdateOperationsInput
  course: CourseUpdateOneWithoutDescriptionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneWithoutArticleInput
}

input ArticleUpsertWithoutCourseInput {
  create: ArticleCreateWithoutCourseInput!
  update: ArticleUpdateWithoutCourseInput!
}

input ArticleUpsertWithoutPostInput {
  create: ArticleCreateWithoutPostInput!
  update: ArticleUpdateWithoutPostInput!
}

input ArticleUpsertWithoutSectionsInput {
  create: ArticleCreateWithoutSectionsInput!
  update: ArticleUpdateWithoutSectionsInput!
}

input ArticleWhereInput {
  AND: [ArticleWhereInput!]
  NOT: [ArticleWhereInput!]
  OR: [ArticleWhereInput!]
  cfId: IntNullableFilter
  course: CourseWhereInput
  courseId: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  post: PostWhereInput
  postID: IntNullableFilter
  sections: SectionListRelationFilter
}

input ArticleWhereUniqueInput {
  cfId: Int
  courseId: Int
  id: Int
  postID: Int
}

type AuthPayload {
  token: String
  user: User
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Course {
  createdAt: DateTime!
  description: Article
  id: Int!
  name: String!
  poster: Media
  shortDescription: String!
}

input CourseCreateManyOwnerInput {
  courseType: courseTypeEnum
  createdAt: DateTime
  id: Int
  name: String!
  posterId: Int
  shortDescription: String!
}

input CourseCreateManyOwnerInputEnvelope {
  data: [CourseCreateManyOwnerInput!]
  skipDuplicates: Boolean
}

input CourseCreateManyPosterInput {
  courseType: courseTypeEnum
  createdAt: DateTime
  id: Int
  name: String!
  ownerId: Int!
  shortDescription: String!
}

input CourseCreateManyPosterInputEnvelope {
  data: [CourseCreateManyPosterInput!]
  skipDuplicates: Boolean
}

input CourseCreateNestedManyWithoutOwnerInput {
  connect: [CourseWhereUniqueInput!]
  connectOrCreate: [CourseCreateOrConnectWithoutOwnerInput!]
  create: [CourseCreateWithoutOwnerInput!]
  createMany: CourseCreateManyOwnerInputEnvelope
}

input CourseCreateNestedManyWithoutPlatformConfigShowedInput {
  connect: [CourseWhereUniqueInput!]
  connectOrCreate: [CourseCreateOrConnectWithoutPlatformConfigShowedInput!]
  create: [CourseCreateWithoutPlatformConfigShowedInput!]
}

input CourseCreateNestedManyWithoutPosterInput {
  connect: [CourseWhereUniqueInput!]
  connectOrCreate: [CourseCreateOrConnectWithoutPosterInput!]
  create: [CourseCreateWithoutPosterInput!]
  createMany: CourseCreateManyPosterInputEnvelope
}

input CourseCreateNestedOneWithoutCourseMediaInput {
  connect: CourseWhereUniqueInput
  connectOrCreate: CourseCreateOrConnectWithoutCourseMediaInput
  create: CourseCreateWithoutCourseMediaInput
}

input CourseCreateNestedOneWithoutDescriptionInput {
  connect: CourseWhereUniqueInput
  connectOrCreate: CourseCreateOrConnectWithoutDescriptionInput
  create: CourseCreateWithoutDescriptionInput
}

input CourseCreateNestedOneWithoutMediaInput {
  connect: CourseWhereUniqueInput
  connectOrCreate: CourseCreateOrConnectWithoutMediaInput
  create: CourseCreateWithoutMediaInput
}

input CourseCreateOrConnectWithoutCourseMediaInput {
  create: CourseCreateWithoutCourseMediaInput!
  where: CourseWhereUniqueInput!
}

input CourseCreateOrConnectWithoutDescriptionInput {
  create: CourseCreateWithoutDescriptionInput!
  where: CourseWhereUniqueInput!
}

input CourseCreateOrConnectWithoutMediaInput {
  create: CourseCreateWithoutMediaInput!
  where: CourseWhereUniqueInput!
}

input CourseCreateOrConnectWithoutOwnerInput {
  create: CourseCreateWithoutOwnerInput!
  where: CourseWhereUniqueInput!
}

input CourseCreateOrConnectWithoutPlatformConfigShowedInput {
  create: CourseCreateWithoutPlatformConfigShowedInput!
  where: CourseWhereUniqueInput!
}

input CourseCreateOrConnectWithoutPosterInput {
  create: CourseCreateWithoutPosterInput!
  where: CourseWhereUniqueInput!
}

input CourseCreateWithoutCourseMediaInput {
  Media: MediaCreateNestedManyWithoutCourseMediaInput
  courseType: courseTypeEnum
  createdAt: DateTime
  description: ArticleCreateNestedOneWithoutCourseInput
  name: String!
  owner: UserCreateNestedOneWithoutCoursesInput!
  platformConfigShowed: PlatformConfigCreateNestedManyWithoutCoursesShownOnLandingInput
  poster: MediaCreateNestedOneWithoutCoursePosterInput
  shortDescription: String!
}

input CourseCreateWithoutDescriptionInput {
  Media: MediaCreateNestedManyWithoutCourseMediaInput
  courseMedia: MediaCreateNestedManyWithoutCourseDescripitonInput
  courseType: courseTypeEnum
  createdAt: DateTime
  name: String!
  owner: UserCreateNestedOneWithoutCoursesInput!
  platformConfigShowed: PlatformConfigCreateNestedManyWithoutCoursesShownOnLandingInput
  poster: MediaCreateNestedOneWithoutCoursePosterInput
  shortDescription: String!
}

input CourseCreateWithoutMediaInput {
  courseMedia: MediaCreateNestedManyWithoutCourseDescripitonInput
  courseType: courseTypeEnum
  createdAt: DateTime
  description: ArticleCreateNestedOneWithoutCourseInput
  name: String!
  owner: UserCreateNestedOneWithoutCoursesInput!
  platformConfigShowed: PlatformConfigCreateNestedManyWithoutCoursesShownOnLandingInput
  poster: MediaCreateNestedOneWithoutCoursePosterInput
  shortDescription: String!
}

input CourseCreateWithoutOwnerInput {
  Media: MediaCreateNestedManyWithoutCourseMediaInput
  courseMedia: MediaCreateNestedManyWithoutCourseDescripitonInput
  courseType: courseTypeEnum
  createdAt: DateTime
  description: ArticleCreateNestedOneWithoutCourseInput
  name: String!
  platformConfigShowed: PlatformConfigCreateNestedManyWithoutCoursesShownOnLandingInput
  poster: MediaCreateNestedOneWithoutCoursePosterInput
  shortDescription: String!
}

input CourseCreateWithoutPlatformConfigShowedInput {
  Media: MediaCreateNestedManyWithoutCourseMediaInput
  courseMedia: MediaCreateNestedManyWithoutCourseDescripitonInput
  courseType: courseTypeEnum
  createdAt: DateTime
  description: ArticleCreateNestedOneWithoutCourseInput
  name: String!
  owner: UserCreateNestedOneWithoutCoursesInput!
  poster: MediaCreateNestedOneWithoutCoursePosterInput
  shortDescription: String!
}

input CourseCreateWithoutPosterInput {
  Media: MediaCreateNestedManyWithoutCourseMediaInput
  courseMedia: MediaCreateNestedManyWithoutCourseDescripitonInput
  courseType: courseTypeEnum
  createdAt: DateTime
  description: ArticleCreateNestedOneWithoutCourseInput
  name: String!
  owner: UserCreateNestedOneWithoutCoursesInput!
  platformConfigShowed: PlatformConfigCreateNestedManyWithoutCoursesShownOnLandingInput
  shortDescription: String!
}

input CourseListRelationFilter {
  every: CourseWhereInput
  none: CourseWhereInput
  some: CourseWhereInput
}

input CourseOrderByRelationAggregateInput {
  _count: SortOrder
}

input CourseOrderByWithRelationInput {
  Media: MediaOrderByRelationAggregateInput
  courseMedia: MediaOrderByRelationAggregateInput
  courseType: SortOrder
  createdAt: SortOrder
  description: ArticleOrderByWithRelationInput
  id: SortOrder
  name: SortOrder
  owner: UserOrderByWithRelationInput
  ownerId: SortOrder
  platformConfigShowed: PlatformConfigOrderByRelationAggregateInput
  poster: MediaOrderByWithRelationInput
  posterId: SortOrder
  shortDescription: SortOrder
}

input CourseScalarWhereInput {
  AND: [CourseScalarWhereInput!]
  NOT: [CourseScalarWhereInput!]
  OR: [CourseScalarWhereInput!]
  courseType: EnumcourseTypeEnumNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  ownerId: IntFilter
  posterId: IntNullableFilter
  shortDescription: StringFilter
}

input CourseUpdateManyMutationInput {
  courseType: NullableEnumcourseTypeEnumFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  shortDescription: StringFieldUpdateOperationsInput
}

input CourseUpdateManyWithWhereWithoutOwnerInput {
  data: CourseUpdateManyMutationInput!
  where: CourseScalarWhereInput!
}

input CourseUpdateManyWithWhereWithoutPlatformConfigShowedInput {
  data: CourseUpdateManyMutationInput!
  where: CourseScalarWhereInput!
}

input CourseUpdateManyWithWhereWithoutPosterInput {
  data: CourseUpdateManyMutationInput!
  where: CourseScalarWhereInput!
}

input CourseUpdateManyWithoutOwnerInput {
  connect: [CourseWhereUniqueInput!]
  connectOrCreate: [CourseCreateOrConnectWithoutOwnerInput!]
  create: [CourseCreateWithoutOwnerInput!]
  createMany: CourseCreateManyOwnerInputEnvelope
  delete: [CourseWhereUniqueInput!]
  deleteMany: [CourseScalarWhereInput!]
  disconnect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [CourseUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutOwnerInput!]
}

input CourseUpdateManyWithoutPlatformConfigShowedInput {
  connect: [CourseWhereUniqueInput!]
  connectOrCreate: [CourseCreateOrConnectWithoutPlatformConfigShowedInput!]
  create: [CourseCreateWithoutPlatformConfigShowedInput!]
  delete: [CourseWhereUniqueInput!]
  deleteMany: [CourseScalarWhereInput!]
  disconnect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutPlatformConfigShowedInput!]
  updateMany: [CourseUpdateManyWithWhereWithoutPlatformConfigShowedInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutPlatformConfigShowedInput!]
}

input CourseUpdateManyWithoutPosterInput {
  connect: [CourseWhereUniqueInput!]
  connectOrCreate: [CourseCreateOrConnectWithoutPosterInput!]
  create: [CourseCreateWithoutPosterInput!]
  createMany: CourseCreateManyPosterInputEnvelope
  delete: [CourseWhereUniqueInput!]
  deleteMany: [CourseScalarWhereInput!]
  disconnect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutPosterInput!]
  updateMany: [CourseUpdateManyWithWhereWithoutPosterInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutPosterInput!]
}

input CourseUpdateOneWithoutCourseMediaInput {
  connect: CourseWhereUniqueInput
  connectOrCreate: CourseCreateOrConnectWithoutCourseMediaInput
  create: CourseCreateWithoutCourseMediaInput
  delete: Boolean
  disconnect: Boolean
  update: CourseUpdateWithoutCourseMediaInput
  upsert: CourseUpsertWithoutCourseMediaInput
}

input CourseUpdateOneWithoutDescriptionInput {
  connect: CourseWhereUniqueInput
  connectOrCreate: CourseCreateOrConnectWithoutDescriptionInput
  create: CourseCreateWithoutDescriptionInput
  delete: Boolean
  disconnect: Boolean
  update: CourseUpdateWithoutDescriptionInput
  upsert: CourseUpsertWithoutDescriptionInput
}

input CourseUpdateOneWithoutMediaInput {
  connect: CourseWhereUniqueInput
  connectOrCreate: CourseCreateOrConnectWithoutMediaInput
  create: CourseCreateWithoutMediaInput
  delete: Boolean
  disconnect: Boolean
  update: CourseUpdateWithoutMediaInput
  upsert: CourseUpsertWithoutMediaInput
}

input CourseUpdateWithWhereUniqueWithoutOwnerInput {
  data: CourseUpdateWithoutOwnerInput!
  where: CourseWhereUniqueInput!
}

input CourseUpdateWithWhereUniqueWithoutPlatformConfigShowedInput {
  data: CourseUpdateWithoutPlatformConfigShowedInput!
  where: CourseWhereUniqueInput!
}

input CourseUpdateWithWhereUniqueWithoutPosterInput {
  data: CourseUpdateWithoutPosterInput!
  where: CourseWhereUniqueInput!
}

input CourseUpdateWithoutCourseMediaInput {
  Media: MediaUpdateManyWithoutCourseMediaInput
  courseType: NullableEnumcourseTypeEnumFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: ArticleUpdateOneWithoutCourseInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutCoursesInput
  platformConfigShowed: PlatformConfigUpdateManyWithoutCoursesShownOnLandingInput
  poster: MediaUpdateOneWithoutCoursePosterInput
  shortDescription: StringFieldUpdateOperationsInput
}

input CourseUpdateWithoutDescriptionInput {
  Media: MediaUpdateManyWithoutCourseMediaInput
  courseMedia: MediaUpdateManyWithoutCourseDescripitonInput
  courseType: NullableEnumcourseTypeEnumFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutCoursesInput
  platformConfigShowed: PlatformConfigUpdateManyWithoutCoursesShownOnLandingInput
  poster: MediaUpdateOneWithoutCoursePosterInput
  shortDescription: StringFieldUpdateOperationsInput
}

input CourseUpdateWithoutMediaInput {
  courseMedia: MediaUpdateManyWithoutCourseDescripitonInput
  courseType: NullableEnumcourseTypeEnumFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: ArticleUpdateOneWithoutCourseInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutCoursesInput
  platformConfigShowed: PlatformConfigUpdateManyWithoutCoursesShownOnLandingInput
  poster: MediaUpdateOneWithoutCoursePosterInput
  shortDescription: StringFieldUpdateOperationsInput
}

input CourseUpdateWithoutOwnerInput {
  Media: MediaUpdateManyWithoutCourseMediaInput
  courseMedia: MediaUpdateManyWithoutCourseDescripitonInput
  courseType: NullableEnumcourseTypeEnumFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: ArticleUpdateOneWithoutCourseInput
  name: StringFieldUpdateOperationsInput
  platformConfigShowed: PlatformConfigUpdateManyWithoutCoursesShownOnLandingInput
  poster: MediaUpdateOneWithoutCoursePosterInput
  shortDescription: StringFieldUpdateOperationsInput
}

input CourseUpdateWithoutPlatformConfigShowedInput {
  Media: MediaUpdateManyWithoutCourseMediaInput
  courseMedia: MediaUpdateManyWithoutCourseDescripitonInput
  courseType: NullableEnumcourseTypeEnumFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: ArticleUpdateOneWithoutCourseInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutCoursesInput
  poster: MediaUpdateOneWithoutCoursePosterInput
  shortDescription: StringFieldUpdateOperationsInput
}

input CourseUpdateWithoutPosterInput {
  Media: MediaUpdateManyWithoutCourseMediaInput
  courseMedia: MediaUpdateManyWithoutCourseDescripitonInput
  courseType: NullableEnumcourseTypeEnumFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: ArticleUpdateOneWithoutCourseInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutCoursesInput
  platformConfigShowed: PlatformConfigUpdateManyWithoutCoursesShownOnLandingInput
  shortDescription: StringFieldUpdateOperationsInput
}

input CourseUpsertWithWhereUniqueWithoutOwnerInput {
  create: CourseCreateWithoutOwnerInput!
  update: CourseUpdateWithoutOwnerInput!
  where: CourseWhereUniqueInput!
}

input CourseUpsertWithWhereUniqueWithoutPlatformConfigShowedInput {
  create: CourseCreateWithoutPlatformConfigShowedInput!
  update: CourseUpdateWithoutPlatformConfigShowedInput!
  where: CourseWhereUniqueInput!
}

input CourseUpsertWithWhereUniqueWithoutPosterInput {
  create: CourseCreateWithoutPosterInput!
  update: CourseUpdateWithoutPosterInput!
  where: CourseWhereUniqueInput!
}

input CourseUpsertWithoutCourseMediaInput {
  create: CourseCreateWithoutCourseMediaInput!
  update: CourseUpdateWithoutCourseMediaInput!
}

input CourseUpsertWithoutDescriptionInput {
  create: CourseCreateWithoutDescriptionInput!
  update: CourseUpdateWithoutDescriptionInput!
}

input CourseUpsertWithoutMediaInput {
  create: CourseCreateWithoutMediaInput!
  update: CourseUpdateWithoutMediaInput!
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  Media: MediaListRelationFilter
  NOT: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  courseMedia: MediaListRelationFilter
  courseType: EnumcourseTypeEnumNullableFilter
  createdAt: DateTimeFilter
  description: ArticleWhereInput
  id: IntFilter
  name: StringFilter
  owner: UserWhereInput
  ownerId: IntFilter
  platformConfigShowed: PlatformConfigListRelationFilter
  poster: MediaWhereInput
  posterId: IntNullableFilter
  shortDescription: StringFilter
}

input CourseWhereUniqueInput {
  id: Int
}

input CreateArticleInput {
  postId: Int!
  sections: [CreateSectionInput]
}

input CreateDescriptionInput {
  projectId: Int!
  sections: [CreateDescriptionSectionInput]
}

input CreateDescriptionSectionInput {
  mediaURL: String
  number: Int!
  text: String
  type: enumSectionType!
}

input CreatePostInput {
  articleBody: String!
  description: String!
  title: String!
}

input CreateSectionInput {
  mediaURL: String
  number: Int!
  text: String
  type: enumSectionType!
}

input CreateStoryInput {
  crowdFundingId: Int!
  sections: [CreateStorySectionInput]
}

input CreateStorySectionInput {
  mediaURL: String
  number: Int!
  text: String
  type: enumSectionType!
}

input CreateUserInput {
  email: String!
  firstname: String!
  lastname: String!
  login: String!
  password: String!
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DeleteArticleInput {
  articleId: Int!
}

input DeleteDescriptionInput {
  descriptionId: Int!
}

input DeleteStoryInput {
  storyId: Int!
}

input EnumcourseTypeEnumNullableFilter {
  equals: courseTypeEnum
  in: [courseTypeEnum!]
  not: NestedEnumcourseTypeEnumNullableFilter
  notIn: [courseTypeEnum!]
}

input EnummediaTypeFieldUpdateOperationsInput {
  set: mediaType
}

input EnummediaTypeFilter {
  equals: mediaType
  in: [mediaType!]
  not: NestedEnummediaTypeFilter
  notIn: [mediaType!]
}

input EnumsectionTypesFieldUpdateOperationsInput {
  set: sectionTypes
}

input EnumsectionTypesFilter {
  equals: sectionTypes
  in: [sectionTypes!]
  not: NestedEnumsectionTypesFilter
  notIn: [sectionTypes!]
}

type Event {
  address: String!
  date: DateTime!
  description: String!
  format: String
  id: Int!
  name: String!
  organizer: String!
  platformConfigShowed(after: PlatformConfigWhereUniqueInput, before: PlatformConfigWhereUniqueInput, first: Int, last: Int): [PlatformConfig!]!
  poster: Media
  shortDescription: String!
  theme: String!
  user: User
}

input EventCreateManyPosterInput {
  address: String!
  date: DateTime!
  description: String!
  format: String
  id: Int
  name: String!
  organizer: String!
  shortDescription: String!
  theme: String!
  userId: Int
}

input EventCreateManyPosterInputEnvelope {
  data: [EventCreateManyPosterInput!]
  skipDuplicates: Boolean
}

input EventCreateManyUserInput {
  address: String!
  date: DateTime!
  description: String!
  format: String
  id: Int
  name: String!
  organizer: String!
  posterId: Int
  shortDescription: String!
  theme: String!
}

input EventCreateManyUserInputEnvelope {
  data: [EventCreateManyUserInput!]
  skipDuplicates: Boolean
}

input EventCreateNestedManyWithoutPlatformConfigShowedInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutPlatformConfigShowedInput!]
  create: [EventCreateWithoutPlatformConfigShowedInput!]
}

input EventCreateNestedManyWithoutPosterInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutPosterInput!]
  create: [EventCreateWithoutPosterInput!]
  createMany: EventCreateManyPosterInputEnvelope
}

input EventCreateNestedManyWithoutUserInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutUserInput!]
  create: [EventCreateWithoutUserInput!]
  createMany: EventCreateManyUserInputEnvelope
}

input EventCreateOrConnectWithoutPlatformConfigShowedInput {
  create: EventCreateWithoutPlatformConfigShowedInput!
  where: EventWhereUniqueInput!
}

input EventCreateOrConnectWithoutPosterInput {
  create: EventCreateWithoutPosterInput!
  where: EventWhereUniqueInput!
}

input EventCreateOrConnectWithoutUserInput {
  create: EventCreateWithoutUserInput!
  where: EventWhereUniqueInput!
}

input EventCreateWithoutPlatformConfigShowedInput {
  address: String!
  date: DateTime!
  description: String!
  format: String
  name: String!
  organizer: String!
  poster: MediaCreateNestedOneWithoutEventInput
  registeredForEvent: RegisteredForEventCreateNestedManyWithoutEventInput
  shortDescription: String!
  theme: String!
  user: UserCreateNestedOneWithoutPublishedEventInput
}

input EventCreateWithoutPosterInput {
  address: String!
  date: DateTime!
  description: String!
  format: String
  name: String!
  organizer: String!
  platformConfigShowed: PlatformConfigCreateNestedManyWithoutEventsShownOnLandingInput
  registeredForEvent: RegisteredForEventCreateNestedManyWithoutEventInput
  shortDescription: String!
  theme: String!
  user: UserCreateNestedOneWithoutPublishedEventInput
}

input EventCreateWithoutUserInput {
  address: String!
  date: DateTime!
  description: String!
  format: String
  name: String!
  organizer: String!
  platformConfigShowed: PlatformConfigCreateNestedManyWithoutEventsShownOnLandingInput
  poster: MediaCreateNestedOneWithoutEventInput
  registeredForEvent: RegisteredForEventCreateNestedManyWithoutEventInput
  shortDescription: String!
  theme: String!
}

input EventCreatedInput {
  address: String
  category: filteringCategoies!
  date: DateTime!
  description: String!
  format: String
  name: String!
  organizer: String!
  shortDescription: String!
  theme: String!
}

input EventListRelationFilter {
  every: EventWhereInput
  none: EventWhereInput
  some: EventWhereInput
}

input EventOrderByRelationAggregateInput {
  _count: SortOrder
}

input EventOrderByWithRelationInput {
  address: SortOrder
  date: SortOrder
  description: SortOrder
  format: SortOrder
  id: SortOrder
  name: SortOrder
  organizer: SortOrder
  platformConfigShowed: PlatformConfigOrderByRelationAggregateInput
  poster: MediaOrderByWithRelationInput
  posterId: SortOrder
  registeredForEvent: RegisteredForEventOrderByRelationAggregateInput
  shortDescription: SortOrder
  theme: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input EventScalarWhereInput {
  AND: [EventScalarWhereInput!]
  NOT: [EventScalarWhereInput!]
  OR: [EventScalarWhereInput!]
  address: StringFilter
  date: DateTimeFilter
  description: StringFilter
  format: StringNullableFilter
  id: IntFilter
  name: StringFilter
  organizer: StringFilter
  posterId: IntNullableFilter
  shortDescription: StringFilter
  theme: StringFilter
  userId: IntNullableFilter
}

input EventUpdateManyMutationInput {
  address: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  format: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  organizer: StringFieldUpdateOperationsInput
  shortDescription: StringFieldUpdateOperationsInput
  theme: StringFieldUpdateOperationsInput
}

input EventUpdateManyWithWhereWithoutPlatformConfigShowedInput {
  data: EventUpdateManyMutationInput!
  where: EventScalarWhereInput!
}

input EventUpdateManyWithWhereWithoutPosterInput {
  data: EventUpdateManyMutationInput!
  where: EventScalarWhereInput!
}

input EventUpdateManyWithWhereWithoutUserInput {
  data: EventUpdateManyMutationInput!
  where: EventScalarWhereInput!
}

input EventUpdateManyWithoutPlatformConfigShowedInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutPlatformConfigShowedInput!]
  create: [EventCreateWithoutPlatformConfigShowedInput!]
  delete: [EventWhereUniqueInput!]
  deleteMany: [EventScalarWhereInput!]
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutPlatformConfigShowedInput!]
  updateMany: [EventUpdateManyWithWhereWithoutPlatformConfigShowedInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutPlatformConfigShowedInput!]
}

input EventUpdateManyWithoutPosterInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutPosterInput!]
  create: [EventCreateWithoutPosterInput!]
  createMany: EventCreateManyPosterInputEnvelope
  delete: [EventWhereUniqueInput!]
  deleteMany: [EventScalarWhereInput!]
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutPosterInput!]
  updateMany: [EventUpdateManyWithWhereWithoutPosterInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutPosterInput!]
}

input EventUpdateManyWithoutUserInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutUserInput!]
  create: [EventCreateWithoutUserInput!]
  createMany: EventCreateManyUserInputEnvelope
  delete: [EventWhereUniqueInput!]
  deleteMany: [EventScalarWhereInput!]
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [EventUpdateManyWithWhereWithoutUserInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutUserInput!]
}

input EventUpdateWithWhereUniqueWithoutPlatformConfigShowedInput {
  data: EventUpdateWithoutPlatformConfigShowedInput!
  where: EventWhereUniqueInput!
}

input EventUpdateWithWhereUniqueWithoutPosterInput {
  data: EventUpdateWithoutPosterInput!
  where: EventWhereUniqueInput!
}

input EventUpdateWithWhereUniqueWithoutUserInput {
  data: EventUpdateWithoutUserInput!
  where: EventWhereUniqueInput!
}

input EventUpdateWithoutPlatformConfigShowedInput {
  address: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  format: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  organizer: StringFieldUpdateOperationsInput
  poster: MediaUpdateOneWithoutEventInput
  registeredForEvent: RegisteredForEventUpdateManyWithoutEventInput
  shortDescription: StringFieldUpdateOperationsInput
  theme: StringFieldUpdateOperationsInput
  user: UserUpdateOneWithoutPublishedEventInput
}

input EventUpdateWithoutPosterInput {
  address: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  format: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  organizer: StringFieldUpdateOperationsInput
  platformConfigShowed: PlatformConfigUpdateManyWithoutEventsShownOnLandingInput
  registeredForEvent: RegisteredForEventUpdateManyWithoutEventInput
  shortDescription: StringFieldUpdateOperationsInput
  theme: StringFieldUpdateOperationsInput
  user: UserUpdateOneWithoutPublishedEventInput
}

input EventUpdateWithoutUserInput {
  address: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  format: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  organizer: StringFieldUpdateOperationsInput
  platformConfigShowed: PlatformConfigUpdateManyWithoutEventsShownOnLandingInput
  poster: MediaUpdateOneWithoutEventInput
  registeredForEvent: RegisteredForEventUpdateManyWithoutEventInput
  shortDescription: StringFieldUpdateOperationsInput
  theme: StringFieldUpdateOperationsInput
}

input EventUpdatedInput {
  address: String
  category: filteringCategoies
  date: DateTime
  description: String
  eventId: Int!
  format: String
  name: String
  organizer: String
  shortDescription: String
  theme: String
}

input EventUpsertWithWhereUniqueWithoutPlatformConfigShowedInput {
  create: EventCreateWithoutPlatformConfigShowedInput!
  update: EventUpdateWithoutPlatformConfigShowedInput!
  where: EventWhereUniqueInput!
}

input EventUpsertWithWhereUniqueWithoutPosterInput {
  create: EventCreateWithoutPosterInput!
  update: EventUpdateWithoutPosterInput!
  where: EventWhereUniqueInput!
}

input EventUpsertWithWhereUniqueWithoutUserInput {
  create: EventCreateWithoutUserInput!
  update: EventUpdateWithoutUserInput!
  where: EventWhereUniqueInput!
}

input EventWhereInput {
  AND: [EventWhereInput!]
  NOT: [EventWhereInput!]
  OR: [EventWhereInput!]
  address: StringFilter
  date: DateTimeFilter
  description: StringFilter
  format: StringNullableFilter
  id: IntFilter
  name: StringFilter
  organizer: StringFilter
  platformConfigShowed: PlatformConfigListRelationFilter
  poster: MediaWhereInput
  posterId: IntNullableFilter
  registeredForEvent: RegisteredForEventListRelationFilter
  shortDescription: StringFilter
  theme: StringFilter
  user: UserWhereInput
  userId: IntNullableFilter
}

input EventWhereUniqueInput {
  id: Int
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Media {
  createdAt: DateTime
  event(after: EventWhereUniqueInput, before: EventWhereUniqueInput, first: Int, last: Int): [Event!]!
  id: Int!
  link: String
  post(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [Post!]!
  postMedia: Post
  type: mediaType!
  user(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input MediaCreateManyCourseDescripitonInput {
  courseMediaId: Int
  createdAt: DateTime
  id: Int
  isApproved: Boolean
  postMediaId: Int
  type: mediaType!
  url: String!
}

input MediaCreateManyCourseDescripitonInputEnvelope {
  data: [MediaCreateManyCourseDescripitonInput!]
  skipDuplicates: Boolean
}

input MediaCreateManyCourseMediaInput {
  courseDescriptionId: Int
  createdAt: DateTime
  id: Int
  isApproved: Boolean
  postMediaId: Int
  type: mediaType!
  url: String!
}

input MediaCreateManyCourseMediaInputEnvelope {
  data: [MediaCreateManyCourseMediaInput!]
  skipDuplicates: Boolean
}

input MediaCreateManyPostMediaInput {
  courseDescriptionId: Int
  courseMediaId: Int
  createdAt: DateTime
  id: Int
  isApproved: Boolean
  type: mediaType!
  url: String!
}

input MediaCreateManyPostMediaInputEnvelope {
  data: [MediaCreateManyPostMediaInput!]
  skipDuplicates: Boolean
}

input MediaCreateNestedManyWithoutCourseDescripitonInput {
  connect: [MediaWhereUniqueInput!]
  connectOrCreate: [MediaCreateOrConnectWithoutCourseDescripitonInput!]
  create: [MediaCreateWithoutCourseDescripitonInput!]
  createMany: MediaCreateManyCourseDescripitonInputEnvelope
}

input MediaCreateNestedManyWithoutCourseMediaInput {
  connect: [MediaWhereUniqueInput!]
  connectOrCreate: [MediaCreateOrConnectWithoutCourseMediaInput!]
  create: [MediaCreateWithoutCourseMediaInput!]
  createMany: MediaCreateManyCourseMediaInputEnvelope
}

input MediaCreateNestedManyWithoutPostMediaInput {
  connect: [MediaWhereUniqueInput!]
  connectOrCreate: [MediaCreateOrConnectWithoutPostMediaInput!]
  create: [MediaCreateWithoutPostMediaInput!]
  createMany: MediaCreateManyPostMediaInputEnvelope
}

input MediaCreateNestedOneWithoutCoursePosterInput {
  connect: MediaWhereUniqueInput
  connectOrCreate: MediaCreateOrConnectWithoutCoursePosterInput
  create: MediaCreateWithoutCoursePosterInput
}

input MediaCreateNestedOneWithoutEventInput {
  connect: MediaWhereUniqueInput
  connectOrCreate: MediaCreateOrConnectWithoutEventInput
  create: MediaCreateWithoutEventInput
}

input MediaCreateNestedOneWithoutMessagerGroupInput {
  connect: MediaWhereUniqueInput
  connectOrCreate: MediaCreateOrConnectWithoutMessagerGroupInput
  create: MediaCreateWithoutMessagerGroupInput
}

input MediaCreateNestedOneWithoutPostInput {
  connect: MediaWhereUniqueInput
  connectOrCreate: MediaCreateOrConnectWithoutPostInput
  create: MediaCreateWithoutPostInput
}

input MediaCreateNestedOneWithoutSectionInput {
  connect: MediaWhereUniqueInput
  connectOrCreate: MediaCreateOrConnectWithoutSectionInput
  create: MediaCreateWithoutSectionInput
}

input MediaCreateNestedOneWithoutUserInput {
  connect: MediaWhereUniqueInput
  connectOrCreate: MediaCreateOrConnectWithoutUserInput
  create: MediaCreateWithoutUserInput
}

input MediaCreateOrConnectWithoutCourseDescripitonInput {
  create: MediaCreateWithoutCourseDescripitonInput!
  where: MediaWhereUniqueInput!
}

input MediaCreateOrConnectWithoutCourseMediaInput {
  create: MediaCreateWithoutCourseMediaInput!
  where: MediaWhereUniqueInput!
}

input MediaCreateOrConnectWithoutCoursePosterInput {
  create: MediaCreateWithoutCoursePosterInput!
  where: MediaWhereUniqueInput!
}

input MediaCreateOrConnectWithoutEventInput {
  create: MediaCreateWithoutEventInput!
  where: MediaWhereUniqueInput!
}

input MediaCreateOrConnectWithoutMessagerGroupInput {
  create: MediaCreateWithoutMessagerGroupInput!
  where: MediaWhereUniqueInput!
}

input MediaCreateOrConnectWithoutPostInput {
  create: MediaCreateWithoutPostInput!
  where: MediaWhereUniqueInput!
}

input MediaCreateOrConnectWithoutPostMediaInput {
  create: MediaCreateWithoutPostMediaInput!
  where: MediaWhereUniqueInput!
}

input MediaCreateOrConnectWithoutSectionInput {
  create: MediaCreateWithoutSectionInput!
  where: MediaWhereUniqueInput!
}

input MediaCreateOrConnectWithoutUserInput {
  create: MediaCreateWithoutUserInput!
  where: MediaWhereUniqueInput!
}

input MediaCreateWithoutCourseDescripitonInput {
  courseMedia: CourseCreateNestedOneWithoutMediaInput
  coursePoster: CourseCreateNestedManyWithoutPosterInput
  createdAt: DateTime
  event: EventCreateNestedManyWithoutPosterInput
  isApproved: Boolean
  messagerGroup: MessagerGroupCreateNestedManyWithoutAvatarInput
  post: PostCreateNestedManyWithoutPosterInput
  postMedia: PostCreateNestedOneWithoutPostMediaInput
  section: SectionCreateNestedManyWithoutMediaInput
  type: mediaType!
  url: String!
  user: UserCreateNestedManyWithoutAvatarInput
}

input MediaCreateWithoutCourseMediaInput {
  courseDescripiton: CourseCreateNestedOneWithoutCourseMediaInput
  coursePoster: CourseCreateNestedManyWithoutPosterInput
  createdAt: DateTime
  event: EventCreateNestedManyWithoutPosterInput
  isApproved: Boolean
  messagerGroup: MessagerGroupCreateNestedManyWithoutAvatarInput
  post: PostCreateNestedManyWithoutPosterInput
  postMedia: PostCreateNestedOneWithoutPostMediaInput
  section: SectionCreateNestedManyWithoutMediaInput
  type: mediaType!
  url: String!
  user: UserCreateNestedManyWithoutAvatarInput
}

input MediaCreateWithoutCoursePosterInput {
  courseDescripiton: CourseCreateNestedOneWithoutCourseMediaInput
  courseMedia: CourseCreateNestedOneWithoutMediaInput
  createdAt: DateTime
  event: EventCreateNestedManyWithoutPosterInput
  isApproved: Boolean
  messagerGroup: MessagerGroupCreateNestedManyWithoutAvatarInput
  post: PostCreateNestedManyWithoutPosterInput
  postMedia: PostCreateNestedOneWithoutPostMediaInput
  section: SectionCreateNestedManyWithoutMediaInput
  type: mediaType!
  url: String!
  user: UserCreateNestedManyWithoutAvatarInput
}

input MediaCreateWithoutEventInput {
  courseDescripiton: CourseCreateNestedOneWithoutCourseMediaInput
  courseMedia: CourseCreateNestedOneWithoutMediaInput
  coursePoster: CourseCreateNestedManyWithoutPosterInput
  createdAt: DateTime
  isApproved: Boolean
  messagerGroup: MessagerGroupCreateNestedManyWithoutAvatarInput
  post: PostCreateNestedManyWithoutPosterInput
  postMedia: PostCreateNestedOneWithoutPostMediaInput
  section: SectionCreateNestedManyWithoutMediaInput
  type: mediaType!
  url: String!
  user: UserCreateNestedManyWithoutAvatarInput
}

input MediaCreateWithoutMessagerGroupInput {
  courseDescripiton: CourseCreateNestedOneWithoutCourseMediaInput
  courseMedia: CourseCreateNestedOneWithoutMediaInput
  coursePoster: CourseCreateNestedManyWithoutPosterInput
  createdAt: DateTime
  event: EventCreateNestedManyWithoutPosterInput
  isApproved: Boolean
  post: PostCreateNestedManyWithoutPosterInput
  postMedia: PostCreateNestedOneWithoutPostMediaInput
  section: SectionCreateNestedManyWithoutMediaInput
  type: mediaType!
  url: String!
  user: UserCreateNestedManyWithoutAvatarInput
}

input MediaCreateWithoutPostInput {
  courseDescripiton: CourseCreateNestedOneWithoutCourseMediaInput
  courseMedia: CourseCreateNestedOneWithoutMediaInput
  coursePoster: CourseCreateNestedManyWithoutPosterInput
  createdAt: DateTime
  event: EventCreateNestedManyWithoutPosterInput
  isApproved: Boolean
  messagerGroup: MessagerGroupCreateNestedManyWithoutAvatarInput
  postMedia: PostCreateNestedOneWithoutPostMediaInput
  section: SectionCreateNestedManyWithoutMediaInput
  type: mediaType!
  url: String!
  user: UserCreateNestedManyWithoutAvatarInput
}

input MediaCreateWithoutPostMediaInput {
  courseDescripiton: CourseCreateNestedOneWithoutCourseMediaInput
  courseMedia: CourseCreateNestedOneWithoutMediaInput
  coursePoster: CourseCreateNestedManyWithoutPosterInput
  createdAt: DateTime
  event: EventCreateNestedManyWithoutPosterInput
  isApproved: Boolean
  messagerGroup: MessagerGroupCreateNestedManyWithoutAvatarInput
  post: PostCreateNestedManyWithoutPosterInput
  section: SectionCreateNestedManyWithoutMediaInput
  type: mediaType!
  url: String!
  user: UserCreateNestedManyWithoutAvatarInput
}

input MediaCreateWithoutSectionInput {
  courseDescripiton: CourseCreateNestedOneWithoutCourseMediaInput
  courseMedia: CourseCreateNestedOneWithoutMediaInput
  coursePoster: CourseCreateNestedManyWithoutPosterInput
  createdAt: DateTime
  event: EventCreateNestedManyWithoutPosterInput
  isApproved: Boolean
  messagerGroup: MessagerGroupCreateNestedManyWithoutAvatarInput
  post: PostCreateNestedManyWithoutPosterInput
  postMedia: PostCreateNestedOneWithoutPostMediaInput
  type: mediaType!
  url: String!
  user: UserCreateNestedManyWithoutAvatarInput
}

input MediaCreateWithoutUserInput {
  courseDescripiton: CourseCreateNestedOneWithoutCourseMediaInput
  courseMedia: CourseCreateNestedOneWithoutMediaInput
  coursePoster: CourseCreateNestedManyWithoutPosterInput
  createdAt: DateTime
  event: EventCreateNestedManyWithoutPosterInput
  isApproved: Boolean
  messagerGroup: MessagerGroupCreateNestedManyWithoutAvatarInput
  post: PostCreateNestedManyWithoutPosterInput
  postMedia: PostCreateNestedOneWithoutPostMediaInput
  section: SectionCreateNestedManyWithoutMediaInput
  type: mediaType!
  url: String!
}

input MediaListRelationFilter {
  every: MediaWhereInput
  none: MediaWhereInput
  some: MediaWhereInput
}

input MediaOrderByRelationAggregateInput {
  _count: SortOrder
}

input MediaOrderByWithRelationInput {
  courseDescripiton: CourseOrderByWithRelationInput
  courseDescriptionId: SortOrder
  courseMedia: CourseOrderByWithRelationInput
  courseMediaId: SortOrder
  coursePoster: CourseOrderByRelationAggregateInput
  createdAt: SortOrder
  event: EventOrderByRelationAggregateInput
  id: SortOrder
  isApproved: SortOrder
  messagerGroup: MessagerGroupOrderByRelationAggregateInput
  post: PostOrderByRelationAggregateInput
  postMedia: PostOrderByWithRelationInput
  postMediaId: SortOrder
  section: SectionOrderByRelationAggregateInput
  type: SortOrder
  url: SortOrder
  user: UserOrderByRelationAggregateInput
}

input MediaScalarWhereInput {
  AND: [MediaScalarWhereInput!]
  NOT: [MediaScalarWhereInput!]
  OR: [MediaScalarWhereInput!]
  courseDescriptionId: IntNullableFilter
  courseMediaId: IntNullableFilter
  createdAt: DateTimeNullableFilter
  id: IntFilter
  isApproved: BoolFilter
  postMediaId: IntNullableFilter
  type: EnummediaTypeFilter
  url: StringFilter
}

input MediaUpdateManyMutationInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  isApproved: BoolFieldUpdateOperationsInput
  type: EnummediaTypeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input MediaUpdateManyWithWhereWithoutCourseDescripitonInput {
  data: MediaUpdateManyMutationInput!
  where: MediaScalarWhereInput!
}

input MediaUpdateManyWithWhereWithoutCourseMediaInput {
  data: MediaUpdateManyMutationInput!
  where: MediaScalarWhereInput!
}

input MediaUpdateManyWithWhereWithoutPostMediaInput {
  data: MediaUpdateManyMutationInput!
  where: MediaScalarWhereInput!
}

input MediaUpdateManyWithoutCourseDescripitonInput {
  connect: [MediaWhereUniqueInput!]
  connectOrCreate: [MediaCreateOrConnectWithoutCourseDescripitonInput!]
  create: [MediaCreateWithoutCourseDescripitonInput!]
  createMany: MediaCreateManyCourseDescripitonInputEnvelope
  delete: [MediaWhereUniqueInput!]
  deleteMany: [MediaScalarWhereInput!]
  disconnect: [MediaWhereUniqueInput!]
  set: [MediaWhereUniqueInput!]
  update: [MediaUpdateWithWhereUniqueWithoutCourseDescripitonInput!]
  updateMany: [MediaUpdateManyWithWhereWithoutCourseDescripitonInput!]
  upsert: [MediaUpsertWithWhereUniqueWithoutCourseDescripitonInput!]
}

input MediaUpdateManyWithoutCourseMediaInput {
  connect: [MediaWhereUniqueInput!]
  connectOrCreate: [MediaCreateOrConnectWithoutCourseMediaInput!]
  create: [MediaCreateWithoutCourseMediaInput!]
  createMany: MediaCreateManyCourseMediaInputEnvelope
  delete: [MediaWhereUniqueInput!]
  deleteMany: [MediaScalarWhereInput!]
  disconnect: [MediaWhereUniqueInput!]
  set: [MediaWhereUniqueInput!]
  update: [MediaUpdateWithWhereUniqueWithoutCourseMediaInput!]
  updateMany: [MediaUpdateManyWithWhereWithoutCourseMediaInput!]
  upsert: [MediaUpsertWithWhereUniqueWithoutCourseMediaInput!]
}

input MediaUpdateManyWithoutPostMediaInput {
  connect: [MediaWhereUniqueInput!]
  connectOrCreate: [MediaCreateOrConnectWithoutPostMediaInput!]
  create: [MediaCreateWithoutPostMediaInput!]
  createMany: MediaCreateManyPostMediaInputEnvelope
  delete: [MediaWhereUniqueInput!]
  deleteMany: [MediaScalarWhereInput!]
  disconnect: [MediaWhereUniqueInput!]
  set: [MediaWhereUniqueInput!]
  update: [MediaUpdateWithWhereUniqueWithoutPostMediaInput!]
  updateMany: [MediaUpdateManyWithWhereWithoutPostMediaInput!]
  upsert: [MediaUpsertWithWhereUniqueWithoutPostMediaInput!]
}

input MediaUpdateOneWithoutCoursePosterInput {
  connect: MediaWhereUniqueInput
  connectOrCreate: MediaCreateOrConnectWithoutCoursePosterInput
  create: MediaCreateWithoutCoursePosterInput
  delete: Boolean
  disconnect: Boolean
  update: MediaUpdateWithoutCoursePosterInput
  upsert: MediaUpsertWithoutCoursePosterInput
}

input MediaUpdateOneWithoutEventInput {
  connect: MediaWhereUniqueInput
  connectOrCreate: MediaCreateOrConnectWithoutEventInput
  create: MediaCreateWithoutEventInput
  delete: Boolean
  disconnect: Boolean
  update: MediaUpdateWithoutEventInput
  upsert: MediaUpsertWithoutEventInput
}

input MediaUpdateOneWithoutMessagerGroupInput {
  connect: MediaWhereUniqueInput
  connectOrCreate: MediaCreateOrConnectWithoutMessagerGroupInput
  create: MediaCreateWithoutMessagerGroupInput
  delete: Boolean
  disconnect: Boolean
  update: MediaUpdateWithoutMessagerGroupInput
  upsert: MediaUpsertWithoutMessagerGroupInput
}

input MediaUpdateOneWithoutPostInput {
  connect: MediaWhereUniqueInput
  connectOrCreate: MediaCreateOrConnectWithoutPostInput
  create: MediaCreateWithoutPostInput
  delete: Boolean
  disconnect: Boolean
  update: MediaUpdateWithoutPostInput
  upsert: MediaUpsertWithoutPostInput
}

input MediaUpdateOneWithoutSectionInput {
  connect: MediaWhereUniqueInput
  connectOrCreate: MediaCreateOrConnectWithoutSectionInput
  create: MediaCreateWithoutSectionInput
  delete: Boolean
  disconnect: Boolean
  update: MediaUpdateWithoutSectionInput
  upsert: MediaUpsertWithoutSectionInput
}

input MediaUpdateOneWithoutUserInput {
  connect: MediaWhereUniqueInput
  connectOrCreate: MediaCreateOrConnectWithoutUserInput
  create: MediaCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: MediaUpdateWithoutUserInput
  upsert: MediaUpsertWithoutUserInput
}

input MediaUpdateWithWhereUniqueWithoutCourseDescripitonInput {
  data: MediaUpdateWithoutCourseDescripitonInput!
  where: MediaWhereUniqueInput!
}

input MediaUpdateWithWhereUniqueWithoutCourseMediaInput {
  data: MediaUpdateWithoutCourseMediaInput!
  where: MediaWhereUniqueInput!
}

input MediaUpdateWithWhereUniqueWithoutPostMediaInput {
  data: MediaUpdateWithoutPostMediaInput!
  where: MediaWhereUniqueInput!
}

input MediaUpdateWithoutCourseDescripitonInput {
  courseMedia: CourseUpdateOneWithoutMediaInput
  coursePoster: CourseUpdateManyWithoutPosterInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  event: EventUpdateManyWithoutPosterInput
  isApproved: BoolFieldUpdateOperationsInput
  messagerGroup: MessagerGroupUpdateManyWithoutAvatarInput
  post: PostUpdateManyWithoutPosterInput
  postMedia: PostUpdateOneWithoutPostMediaInput
  section: SectionUpdateManyWithoutMediaInput
  type: EnummediaTypeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  user: UserUpdateManyWithoutAvatarInput
}

input MediaUpdateWithoutCourseMediaInput {
  courseDescripiton: CourseUpdateOneWithoutCourseMediaInput
  coursePoster: CourseUpdateManyWithoutPosterInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  event: EventUpdateManyWithoutPosterInput
  isApproved: BoolFieldUpdateOperationsInput
  messagerGroup: MessagerGroupUpdateManyWithoutAvatarInput
  post: PostUpdateManyWithoutPosterInput
  postMedia: PostUpdateOneWithoutPostMediaInput
  section: SectionUpdateManyWithoutMediaInput
  type: EnummediaTypeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  user: UserUpdateManyWithoutAvatarInput
}

input MediaUpdateWithoutCoursePosterInput {
  courseDescripiton: CourseUpdateOneWithoutCourseMediaInput
  courseMedia: CourseUpdateOneWithoutMediaInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  event: EventUpdateManyWithoutPosterInput
  isApproved: BoolFieldUpdateOperationsInput
  messagerGroup: MessagerGroupUpdateManyWithoutAvatarInput
  post: PostUpdateManyWithoutPosterInput
  postMedia: PostUpdateOneWithoutPostMediaInput
  section: SectionUpdateManyWithoutMediaInput
  type: EnummediaTypeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  user: UserUpdateManyWithoutAvatarInput
}

input MediaUpdateWithoutEventInput {
  courseDescripiton: CourseUpdateOneWithoutCourseMediaInput
  courseMedia: CourseUpdateOneWithoutMediaInput
  coursePoster: CourseUpdateManyWithoutPosterInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  isApproved: BoolFieldUpdateOperationsInput
  messagerGroup: MessagerGroupUpdateManyWithoutAvatarInput
  post: PostUpdateManyWithoutPosterInput
  postMedia: PostUpdateOneWithoutPostMediaInput
  section: SectionUpdateManyWithoutMediaInput
  type: EnummediaTypeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  user: UserUpdateManyWithoutAvatarInput
}

input MediaUpdateWithoutMessagerGroupInput {
  courseDescripiton: CourseUpdateOneWithoutCourseMediaInput
  courseMedia: CourseUpdateOneWithoutMediaInput
  coursePoster: CourseUpdateManyWithoutPosterInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  event: EventUpdateManyWithoutPosterInput
  isApproved: BoolFieldUpdateOperationsInput
  post: PostUpdateManyWithoutPosterInput
  postMedia: PostUpdateOneWithoutPostMediaInput
  section: SectionUpdateManyWithoutMediaInput
  type: EnummediaTypeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  user: UserUpdateManyWithoutAvatarInput
}

input MediaUpdateWithoutPostInput {
  courseDescripiton: CourseUpdateOneWithoutCourseMediaInput
  courseMedia: CourseUpdateOneWithoutMediaInput
  coursePoster: CourseUpdateManyWithoutPosterInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  event: EventUpdateManyWithoutPosterInput
  isApproved: BoolFieldUpdateOperationsInput
  messagerGroup: MessagerGroupUpdateManyWithoutAvatarInput
  postMedia: PostUpdateOneWithoutPostMediaInput
  section: SectionUpdateManyWithoutMediaInput
  type: EnummediaTypeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  user: UserUpdateManyWithoutAvatarInput
}

input MediaUpdateWithoutPostMediaInput {
  courseDescripiton: CourseUpdateOneWithoutCourseMediaInput
  courseMedia: CourseUpdateOneWithoutMediaInput
  coursePoster: CourseUpdateManyWithoutPosterInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  event: EventUpdateManyWithoutPosterInput
  isApproved: BoolFieldUpdateOperationsInput
  messagerGroup: MessagerGroupUpdateManyWithoutAvatarInput
  post: PostUpdateManyWithoutPosterInput
  section: SectionUpdateManyWithoutMediaInput
  type: EnummediaTypeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  user: UserUpdateManyWithoutAvatarInput
}

input MediaUpdateWithoutSectionInput {
  courseDescripiton: CourseUpdateOneWithoutCourseMediaInput
  courseMedia: CourseUpdateOneWithoutMediaInput
  coursePoster: CourseUpdateManyWithoutPosterInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  event: EventUpdateManyWithoutPosterInput
  isApproved: BoolFieldUpdateOperationsInput
  messagerGroup: MessagerGroupUpdateManyWithoutAvatarInput
  post: PostUpdateManyWithoutPosterInput
  postMedia: PostUpdateOneWithoutPostMediaInput
  type: EnummediaTypeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  user: UserUpdateManyWithoutAvatarInput
}

input MediaUpdateWithoutUserInput {
  courseDescripiton: CourseUpdateOneWithoutCourseMediaInput
  courseMedia: CourseUpdateOneWithoutMediaInput
  coursePoster: CourseUpdateManyWithoutPosterInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  event: EventUpdateManyWithoutPosterInput
  isApproved: BoolFieldUpdateOperationsInput
  messagerGroup: MessagerGroupUpdateManyWithoutAvatarInput
  post: PostUpdateManyWithoutPosterInput
  postMedia: PostUpdateOneWithoutPostMediaInput
  section: SectionUpdateManyWithoutMediaInput
  type: EnummediaTypeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input MediaUpsertWithWhereUniqueWithoutCourseDescripitonInput {
  create: MediaCreateWithoutCourseDescripitonInput!
  update: MediaUpdateWithoutCourseDescripitonInput!
  where: MediaWhereUniqueInput!
}

input MediaUpsertWithWhereUniqueWithoutCourseMediaInput {
  create: MediaCreateWithoutCourseMediaInput!
  update: MediaUpdateWithoutCourseMediaInput!
  where: MediaWhereUniqueInput!
}

input MediaUpsertWithWhereUniqueWithoutPostMediaInput {
  create: MediaCreateWithoutPostMediaInput!
  update: MediaUpdateWithoutPostMediaInput!
  where: MediaWhereUniqueInput!
}

input MediaUpsertWithoutCoursePosterInput {
  create: MediaCreateWithoutCoursePosterInput!
  update: MediaUpdateWithoutCoursePosterInput!
}

input MediaUpsertWithoutEventInput {
  create: MediaCreateWithoutEventInput!
  update: MediaUpdateWithoutEventInput!
}

input MediaUpsertWithoutMessagerGroupInput {
  create: MediaCreateWithoutMessagerGroupInput!
  update: MediaUpdateWithoutMessagerGroupInput!
}

input MediaUpsertWithoutPostInput {
  create: MediaCreateWithoutPostInput!
  update: MediaUpdateWithoutPostInput!
}

input MediaUpsertWithoutSectionInput {
  create: MediaCreateWithoutSectionInput!
  update: MediaUpdateWithoutSectionInput!
}

input MediaUpsertWithoutUserInput {
  create: MediaCreateWithoutUserInput!
  update: MediaUpdateWithoutUserInput!
}

input MediaWhereInput {
  AND: [MediaWhereInput!]
  NOT: [MediaWhereInput!]
  OR: [MediaWhereInput!]
  courseDescripiton: CourseWhereInput
  courseDescriptionId: IntNullableFilter
  courseMedia: CourseWhereInput
  courseMediaId: IntNullableFilter
  coursePoster: CourseListRelationFilter
  createdAt: DateTimeNullableFilter
  event: EventListRelationFilter
  id: IntFilter
  isApproved: BoolFilter
  messagerGroup: MessagerGroupListRelationFilter
  post: PostListRelationFilter
  postMedia: PostWhereInput
  postMediaId: IntNullableFilter
  section: SectionListRelationFilter
  type: EnummediaTypeFilter
  url: StringFilter
  user: UserListRelationFilter
}

input MediaWhereUniqueInput {
  id: Int
  url: String
}

type Message {
  createdAt: DateTime!
  group: MessagerGroup!
  id: Int!
  sender: User!
  text: String!
  updatedAt: DateTime!
}

input MessageCreateManyGroupInput {
  createdAt: DateTime
  id: Int
  senderId: Int!
  text: String!
  updatedAt: DateTime
}

input MessageCreateManyGroupInputEnvelope {
  data: [MessageCreateManyGroupInput!]
  skipDuplicates: Boolean
}

input MessageCreateManySenderInput {
  createdAt: DateTime
  groupId: Int!
  id: Int
  text: String!
  updatedAt: DateTime
}

input MessageCreateManySenderInputEnvelope {
  data: [MessageCreateManySenderInput!]
  skipDuplicates: Boolean
}

input MessageCreateNestedManyWithoutGroupInput {
  connect: [MessageWhereUniqueInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutGroupInput!]
  create: [MessageCreateWithoutGroupInput!]
  createMany: MessageCreateManyGroupInputEnvelope
}

input MessageCreateNestedManyWithoutSenderInput {
  connect: [MessageWhereUniqueInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutSenderInput!]
  create: [MessageCreateWithoutSenderInput!]
  createMany: MessageCreateManySenderInputEnvelope
}

input MessageCreateOrConnectWithoutGroupInput {
  create: MessageCreateWithoutGroupInput!
  where: MessageWhereUniqueInput!
}

input MessageCreateOrConnectWithoutSenderInput {
  create: MessageCreateWithoutSenderInput!
  where: MessageWhereUniqueInput!
}

input MessageCreateWithoutGroupInput {
  createdAt: DateTime
  sender: UserCreateNestedOneWithoutMessagesInput!
  text: String!
  updatedAt: DateTime
}

input MessageCreateWithoutSenderInput {
  createdAt: DateTime
  group: MessagerGroupCreateNestedOneWithoutMessagesInput!
  text: String!
  updatedAt: DateTime
}

input MessageListRelationFilter {
  every: MessageWhereInput
  none: MessageWhereInput
  some: MessageWhereInput
}

input MessageOrderByRelationAggregateInput {
  _count: SortOrder
}

input MessageScalarWhereInput {
  AND: [MessageScalarWhereInput!]
  NOT: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  createdAt: DateTimeFilter
  groupId: IntFilter
  id: IntFilter
  senderId: IntFilter
  text: StringFilter
  updatedAt: DateTimeFilter
}

input MessageUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MessageUpdateManyWithWhereWithoutGroupInput {
  data: MessageUpdateManyMutationInput!
  where: MessageScalarWhereInput!
}

input MessageUpdateManyWithWhereWithoutSenderInput {
  data: MessageUpdateManyMutationInput!
  where: MessageScalarWhereInput!
}

input MessageUpdateManyWithoutGroupInput {
  connect: [MessageWhereUniqueInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutGroupInput!]
  create: [MessageCreateWithoutGroupInput!]
  createMany: MessageCreateManyGroupInputEnvelope
  delete: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutGroupInput!]
  updateMany: [MessageUpdateManyWithWhereWithoutGroupInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutGroupInput!]
}

input MessageUpdateManyWithoutSenderInput {
  connect: [MessageWhereUniqueInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutSenderInput!]
  create: [MessageCreateWithoutSenderInput!]
  createMany: MessageCreateManySenderInputEnvelope
  delete: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutSenderInput!]
  updateMany: [MessageUpdateManyWithWhereWithoutSenderInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutSenderInput!]
}

input MessageUpdateWithWhereUniqueWithoutGroupInput {
  data: MessageUpdateWithoutGroupInput!
  where: MessageWhereUniqueInput!
}

input MessageUpdateWithWhereUniqueWithoutSenderInput {
  data: MessageUpdateWithoutSenderInput!
  where: MessageWhereUniqueInput!
}

input MessageUpdateWithoutGroupInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  sender: UserUpdateOneRequiredWithoutMessagesInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MessageUpdateWithoutSenderInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  group: MessagerGroupUpdateOneRequiredWithoutMessagesInput
  text: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MessageUpsertWithWhereUniqueWithoutGroupInput {
  create: MessageCreateWithoutGroupInput!
  update: MessageUpdateWithoutGroupInput!
  where: MessageWhereUniqueInput!
}

input MessageUpsertWithWhereUniqueWithoutSenderInput {
  create: MessageCreateWithoutSenderInput!
  update: MessageUpdateWithoutSenderInput!
  where: MessageWhereUniqueInput!
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  createdAt: DateTimeFilter
  group: MessagerGroupWhereInput
  groupId: IntFilter
  id: IntFilter
  sender: UserWhereInput
  senderId: IntFilter
  text: StringFilter
  updatedAt: DateTimeFilter
}

input MessageWhereUniqueInput {
  id: Int
}

type MessagerGroup {
  admins(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  avatar: Media
  createdAt: DateTime!
  id: Int!
  inviteURL: String
  members(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  messages(after: MessageWhereUniqueInput, before: MessageWhereUniqueInput, first: Int, last: Int): [Message!]!
  title: String!
  type: String!
}

input MessagerGroupCreateManyAvatarInput {
  createdAt: DateTime
  id: Int
  inviteURL: String
  title: String!
  type: String!
}

input MessagerGroupCreateManyAvatarInputEnvelope {
  data: [MessagerGroupCreateManyAvatarInput!]
  skipDuplicates: Boolean
}

input MessagerGroupCreateNestedManyWithoutAdminsInput {
  connect: [MessagerGroupWhereUniqueInput!]
  connectOrCreate: [MessagerGroupCreateOrConnectWithoutAdminsInput!]
  create: [MessagerGroupCreateWithoutAdminsInput!]
}

input MessagerGroupCreateNestedManyWithoutAvatarInput {
  connect: [MessagerGroupWhereUniqueInput!]
  connectOrCreate: [MessagerGroupCreateOrConnectWithoutAvatarInput!]
  create: [MessagerGroupCreateWithoutAvatarInput!]
  createMany: MessagerGroupCreateManyAvatarInputEnvelope
}

input MessagerGroupCreateNestedManyWithoutMembersInput {
  connect: [MessagerGroupWhereUniqueInput!]
  connectOrCreate: [MessagerGroupCreateOrConnectWithoutMembersInput!]
  create: [MessagerGroupCreateWithoutMembersInput!]
}

input MessagerGroupCreateNestedOneWithoutMessagesInput {
  connect: MessagerGroupWhereUniqueInput
  connectOrCreate: MessagerGroupCreateOrConnectWithoutMessagesInput
  create: MessagerGroupCreateWithoutMessagesInput
}

input MessagerGroupCreateOrConnectWithoutAdminsInput {
  create: MessagerGroupCreateWithoutAdminsInput!
  where: MessagerGroupWhereUniqueInput!
}

input MessagerGroupCreateOrConnectWithoutAvatarInput {
  create: MessagerGroupCreateWithoutAvatarInput!
  where: MessagerGroupWhereUniqueInput!
}

input MessagerGroupCreateOrConnectWithoutMembersInput {
  create: MessagerGroupCreateWithoutMembersInput!
  where: MessagerGroupWhereUniqueInput!
}

input MessagerGroupCreateOrConnectWithoutMessagesInput {
  create: MessagerGroupCreateWithoutMessagesInput!
  where: MessagerGroupWhereUniqueInput!
}

input MessagerGroupCreateWithoutAdminsInput {
  avatar: MediaCreateNestedOneWithoutMessagerGroupInput
  createdAt: DateTime
  inviteURL: String
  members: UserCreateNestedManyWithoutGroupsInput
  messages: MessageCreateNestedManyWithoutGroupInput
  title: String!
  type: String!
}

input MessagerGroupCreateWithoutAvatarInput {
  admins: UserCreateNestedManyWithoutGroupAdminsInput
  createdAt: DateTime
  inviteURL: String
  members: UserCreateNestedManyWithoutGroupsInput
  messages: MessageCreateNestedManyWithoutGroupInput
  title: String!
  type: String!
}

input MessagerGroupCreateWithoutMembersInput {
  admins: UserCreateNestedManyWithoutGroupAdminsInput
  avatar: MediaCreateNestedOneWithoutMessagerGroupInput
  createdAt: DateTime
  inviteURL: String
  messages: MessageCreateNestedManyWithoutGroupInput
  title: String!
  type: String!
}

input MessagerGroupCreateWithoutMessagesInput {
  admins: UserCreateNestedManyWithoutGroupAdminsInput
  avatar: MediaCreateNestedOneWithoutMessagerGroupInput
  createdAt: DateTime
  inviteURL: String
  members: UserCreateNestedManyWithoutGroupsInput
  title: String!
  type: String!
}

input MessagerGroupListRelationFilter {
  every: MessagerGroupWhereInput
  none: MessagerGroupWhereInput
  some: MessagerGroupWhereInput
}

input MessagerGroupOrderByRelationAggregateInput {
  _count: SortOrder
}

input MessagerGroupOrderByWithRelationInput {
  admins: UserOrderByRelationAggregateInput
  avatar: MediaOrderByWithRelationInput
  avatarId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  inviteURL: SortOrder
  members: UserOrderByRelationAggregateInput
  messages: MessageOrderByRelationAggregateInput
  title: SortOrder
  type: SortOrder
}

input MessagerGroupScalarWhereInput {
  AND: [MessagerGroupScalarWhereInput!]
  NOT: [MessagerGroupScalarWhereInput!]
  OR: [MessagerGroupScalarWhereInput!]
  avatarId: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  inviteURL: StringNullableFilter
  title: StringFilter
  type: StringFilter
}

input MessagerGroupUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  inviteURL: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input MessagerGroupUpdateManyWithWhereWithoutAdminsInput {
  data: MessagerGroupUpdateManyMutationInput!
  where: MessagerGroupScalarWhereInput!
}

input MessagerGroupUpdateManyWithWhereWithoutAvatarInput {
  data: MessagerGroupUpdateManyMutationInput!
  where: MessagerGroupScalarWhereInput!
}

input MessagerGroupUpdateManyWithWhereWithoutMembersInput {
  data: MessagerGroupUpdateManyMutationInput!
  where: MessagerGroupScalarWhereInput!
}

input MessagerGroupUpdateManyWithoutAdminsInput {
  connect: [MessagerGroupWhereUniqueInput!]
  connectOrCreate: [MessagerGroupCreateOrConnectWithoutAdminsInput!]
  create: [MessagerGroupCreateWithoutAdminsInput!]
  delete: [MessagerGroupWhereUniqueInput!]
  deleteMany: [MessagerGroupScalarWhereInput!]
  disconnect: [MessagerGroupWhereUniqueInput!]
  set: [MessagerGroupWhereUniqueInput!]
  update: [MessagerGroupUpdateWithWhereUniqueWithoutAdminsInput!]
  updateMany: [MessagerGroupUpdateManyWithWhereWithoutAdminsInput!]
  upsert: [MessagerGroupUpsertWithWhereUniqueWithoutAdminsInput!]
}

input MessagerGroupUpdateManyWithoutAvatarInput {
  connect: [MessagerGroupWhereUniqueInput!]
  connectOrCreate: [MessagerGroupCreateOrConnectWithoutAvatarInput!]
  create: [MessagerGroupCreateWithoutAvatarInput!]
  createMany: MessagerGroupCreateManyAvatarInputEnvelope
  delete: [MessagerGroupWhereUniqueInput!]
  deleteMany: [MessagerGroupScalarWhereInput!]
  disconnect: [MessagerGroupWhereUniqueInput!]
  set: [MessagerGroupWhereUniqueInput!]
  update: [MessagerGroupUpdateWithWhereUniqueWithoutAvatarInput!]
  updateMany: [MessagerGroupUpdateManyWithWhereWithoutAvatarInput!]
  upsert: [MessagerGroupUpsertWithWhereUniqueWithoutAvatarInput!]
}

input MessagerGroupUpdateManyWithoutMembersInput {
  connect: [MessagerGroupWhereUniqueInput!]
  connectOrCreate: [MessagerGroupCreateOrConnectWithoutMembersInput!]
  create: [MessagerGroupCreateWithoutMembersInput!]
  delete: [MessagerGroupWhereUniqueInput!]
  deleteMany: [MessagerGroupScalarWhereInput!]
  disconnect: [MessagerGroupWhereUniqueInput!]
  set: [MessagerGroupWhereUniqueInput!]
  update: [MessagerGroupUpdateWithWhereUniqueWithoutMembersInput!]
  updateMany: [MessagerGroupUpdateManyWithWhereWithoutMembersInput!]
  upsert: [MessagerGroupUpsertWithWhereUniqueWithoutMembersInput!]
}

input MessagerGroupUpdateOneRequiredWithoutMessagesInput {
  connect: MessagerGroupWhereUniqueInput
  connectOrCreate: MessagerGroupCreateOrConnectWithoutMessagesInput
  create: MessagerGroupCreateWithoutMessagesInput
  update: MessagerGroupUpdateWithoutMessagesInput
  upsert: MessagerGroupUpsertWithoutMessagesInput
}

input MessagerGroupUpdateWithWhereUniqueWithoutAdminsInput {
  data: MessagerGroupUpdateWithoutAdminsInput!
  where: MessagerGroupWhereUniqueInput!
}

input MessagerGroupUpdateWithWhereUniqueWithoutAvatarInput {
  data: MessagerGroupUpdateWithoutAvatarInput!
  where: MessagerGroupWhereUniqueInput!
}

input MessagerGroupUpdateWithWhereUniqueWithoutMembersInput {
  data: MessagerGroupUpdateWithoutMembersInput!
  where: MessagerGroupWhereUniqueInput!
}

input MessagerGroupUpdateWithoutAdminsInput {
  avatar: MediaUpdateOneWithoutMessagerGroupInput
  createdAt: DateTimeFieldUpdateOperationsInput
  inviteURL: NullableStringFieldUpdateOperationsInput
  members: UserUpdateManyWithoutGroupsInput
  messages: MessageUpdateManyWithoutGroupInput
  title: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input MessagerGroupUpdateWithoutAvatarInput {
  admins: UserUpdateManyWithoutGroupAdminsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  inviteURL: NullableStringFieldUpdateOperationsInput
  members: UserUpdateManyWithoutGroupsInput
  messages: MessageUpdateManyWithoutGroupInput
  title: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input MessagerGroupUpdateWithoutMembersInput {
  admins: UserUpdateManyWithoutGroupAdminsInput
  avatar: MediaUpdateOneWithoutMessagerGroupInput
  createdAt: DateTimeFieldUpdateOperationsInput
  inviteURL: NullableStringFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutGroupInput
  title: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input MessagerGroupUpdateWithoutMessagesInput {
  admins: UserUpdateManyWithoutGroupAdminsInput
  avatar: MediaUpdateOneWithoutMessagerGroupInput
  createdAt: DateTimeFieldUpdateOperationsInput
  inviteURL: NullableStringFieldUpdateOperationsInput
  members: UserUpdateManyWithoutGroupsInput
  title: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input MessagerGroupUpsertWithWhereUniqueWithoutAdminsInput {
  create: MessagerGroupCreateWithoutAdminsInput!
  update: MessagerGroupUpdateWithoutAdminsInput!
  where: MessagerGroupWhereUniqueInput!
}

input MessagerGroupUpsertWithWhereUniqueWithoutAvatarInput {
  create: MessagerGroupCreateWithoutAvatarInput!
  update: MessagerGroupUpdateWithoutAvatarInput!
  where: MessagerGroupWhereUniqueInput!
}

input MessagerGroupUpsertWithWhereUniqueWithoutMembersInput {
  create: MessagerGroupCreateWithoutMembersInput!
  update: MessagerGroupUpdateWithoutMembersInput!
  where: MessagerGroupWhereUniqueInput!
}

input MessagerGroupUpsertWithoutMessagesInput {
  create: MessagerGroupCreateWithoutMessagesInput!
  update: MessagerGroupUpdateWithoutMessagesInput!
}

input MessagerGroupWhereInput {
  AND: [MessagerGroupWhereInput!]
  NOT: [MessagerGroupWhereInput!]
  OR: [MessagerGroupWhereInput!]
  admins: UserListRelationFilter
  avatar: MediaWhereInput
  avatarId: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  inviteURL: StringNullableFilter
  members: UserListRelationFilter
  messages: MessageListRelationFilter
  title: StringFilter
  type: StringFilter
}

input MessagerGroupWhereUniqueInput {
  id: Int
  inviteURL: String
}

type Mutation {
  addMembersToGroup(data: addMembersToGroupInput!): String
  articleCreateMutation(data: CreateArticleInput!): String
  articleDeleteMutation(data: DeleteArticleInput!): String
  articleUpdateMutation(data: UpdateArticleInput!): String
  createGroup(data: createGroupInput!): MessagerGroup
  createMedia(data: createMediaInput!): SignUrlResponse
  createOneCourse(data: createCourseInput!): Course
  createOneEvent(data: EventCreatedInput!): Event
  createOnePost(data: PostCreateInput!): Post
  createOneStream(data: StreamCreateInput!): Stream!
  createOneTask(data: TaskCreateInput!): Task!
  createOneTest(data: TestCreateInput!): Test!
  createOneTestPass(data: TestPassCreateInput!): TestPass!
  deleteGroup(data: deleteGroupInput!): String
  deleteMediaElement(data: deleteMediaElementInput!): String
  deleteOneCourse(where: CourseWhereUniqueInput!): Course
  deleteOneEvent(where: EventWhereUniqueInput!): Event
  deletePostMedia(data: deletePostMedia!): String
  deleteProjectPresentationMedia(data: deleteProjectPresentationMedia!): String
  descriptionCreateMutation(data: CreateDescriptionInput!): String
  descriptionDeleteMutation(data: DeleteDescriptionInput!): String
  descriptionUpdateMutation(data: UpdateDescriptionInput!): String
  leaveFromGroup(data: leaveFromGroupInput!): String
  putEventPoster(data: getMediaDataInput!): SignUrlResponse
  putPostMedia(data: getMediaDataInput!): SignUrlResponse
  putPostPoster(data: getMediaDataInput!): SignUrlResponse
  putProjectPoster(data: getMediaDataInput!): SignUrlResponse
  putProjectPresentationMedia(data: getMediaDataInput!): SignUrlResponse
  putUserAvatar(data: getMediaDataInput!): SignUrlResponse
  registerForEvent(data: RegisterForEventInput!): String
  removeGroupAdmin(data: removeGroupAdminInput!): String
  removeMembersFromGroup(data: removeMembersFromGroupInput!): String
  sendMessage(data: sendMessageInput!): Message
  sendStreamMessage(data: sendStreamMessageInput!): StreamMessage
  setGroupAdmin(data: setGroupAdminInput!): String
  signIn(data: SignInInput!): AuthPayload
  signUp(data: CreateUserInput!): AuthPayload
  storyCreateMutation(data: CreateStoryInput!): String
  storyDeleteMutation(data: DeleteStoryInput!): String
  storyUpdateMutation(data: UpdateStoryInput!): String
  switchToMessager(data: switchToMessagerInput!): MessagerGroup
  updateCourse(data: updateCourseInput!): String
  updateGroup(data: updateGroupInput!): MessagerGroup
  updateOneEvent(data: EventUpdatedInput!): String
  updateOneStream(data: StreamUpdateInput!, where: StreamWhereUniqueInput!): Stream
  updateOneTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateOneTest(data: TestUpdateInput!, where: TestWhereUniqueInput!): Test
  updateOneTestPass(data: TestPassUpdateInput!, where: TestPassWhereUniqueInput!): TestPass
  updateUserData(data: updateUserInput): User
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumcourseTypeEnumNullableFilter {
  equals: courseTypeEnum
  in: [courseTypeEnum!]
  not: NestedEnumcourseTypeEnumNullableFilter
  notIn: [courseTypeEnum!]
}

input NestedEnummediaTypeFilter {
  equals: mediaType
  in: [mediaType!]
  not: NestedEnummediaTypeFilter
  notIn: [mediaType!]
}

input NestedEnumsectionTypesFilter {
  equals: sectionTypes
  in: [sectionTypes!]
  not: NestedEnumsectionTypesFilter
  notIn: [sectionTypes!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableEnumcourseTypeEnumFieldUpdateOperationsInput {
  set: courseTypeEnum
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type PlatformConfig {
  createdAt: DateTime!
  eventsShownOnLanding(after: EventWhereUniqueInput, before: EventWhereUniqueInput, first: Int, last: Int): [Event!]!
  id: Int!
  platformDescription: String!
  platformShortDescription: String!
  platformTagline: String!
  platformTitle: String!
  totalBudgetInvestment: Int!
  totalCompanyCount: Int!
  totalExtraBudgetInvestment: Int!
}

input PlatformConfigCreateNestedManyWithoutCoursesShownOnLandingInput {
  connect: [PlatformConfigWhereUniqueInput!]
  connectOrCreate: [PlatformConfigCreateOrConnectWithoutCoursesShownOnLandingInput!]
  create: [PlatformConfigCreateWithoutCoursesShownOnLandingInput!]
}

input PlatformConfigCreateNestedManyWithoutEventsShownOnLandingInput {
  connect: [PlatformConfigWhereUniqueInput!]
  connectOrCreate: [PlatformConfigCreateOrConnectWithoutEventsShownOnLandingInput!]
  create: [PlatformConfigCreateWithoutEventsShownOnLandingInput!]
}

input PlatformConfigCreateOrConnectWithoutCoursesShownOnLandingInput {
  create: PlatformConfigCreateWithoutCoursesShownOnLandingInput!
  where: PlatformConfigWhereUniqueInput!
}

input PlatformConfigCreateOrConnectWithoutEventsShownOnLandingInput {
  create: PlatformConfigCreateWithoutEventsShownOnLandingInput!
  where: PlatformConfigWhereUniqueInput!
}

input PlatformConfigCreateWithoutCoursesShownOnLandingInput {
  createdAt: DateTime
  eventsShownOnLanding: EventCreateNestedManyWithoutPlatformConfigShowedInput
  platformDescription: String!
  platformShortDescription: String!
  platformTagline: String!
  platformTitle: String!
  totalBudgetInvestment: Int!
  totalCompanyCount: Int!
  totalExtraBudgetInvestment: Int!
  totalcourseCount: Int!
}

input PlatformConfigCreateWithoutEventsShownOnLandingInput {
  coursesShownOnLanding: CourseCreateNestedManyWithoutPlatformConfigShowedInput
  createdAt: DateTime
  platformDescription: String!
  platformShortDescription: String!
  platformTagline: String!
  platformTitle: String!
  totalBudgetInvestment: Int!
  totalCompanyCount: Int!
  totalExtraBudgetInvestment: Int!
  totalcourseCount: Int!
}

input PlatformConfigListRelationFilter {
  every: PlatformConfigWhereInput
  none: PlatformConfigWhereInput
  some: PlatformConfigWhereInput
}

input PlatformConfigOrderByRelationAggregateInput {
  _count: SortOrder
}

input PlatformConfigScalarWhereInput {
  AND: [PlatformConfigScalarWhereInput!]
  NOT: [PlatformConfigScalarWhereInput!]
  OR: [PlatformConfigScalarWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  platformDescription: StringFilter
  platformShortDescription: StringFilter
  platformTagline: StringFilter
  platformTitle: StringFilter
  totalBudgetInvestment: IntFilter
  totalCompanyCount: IntFilter
  totalExtraBudgetInvestment: IntFilter
  totalcourseCount: IntFilter
}

input PlatformConfigUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  platformDescription: StringFieldUpdateOperationsInput
  platformShortDescription: StringFieldUpdateOperationsInput
  platformTagline: StringFieldUpdateOperationsInput
  platformTitle: StringFieldUpdateOperationsInput
  totalBudgetInvestment: IntFieldUpdateOperationsInput
  totalCompanyCount: IntFieldUpdateOperationsInput
  totalExtraBudgetInvestment: IntFieldUpdateOperationsInput
  totalcourseCount: IntFieldUpdateOperationsInput
}

input PlatformConfigUpdateManyWithWhereWithoutCoursesShownOnLandingInput {
  data: PlatformConfigUpdateManyMutationInput!
  where: PlatformConfigScalarWhereInput!
}

input PlatformConfigUpdateManyWithWhereWithoutEventsShownOnLandingInput {
  data: PlatformConfigUpdateManyMutationInput!
  where: PlatformConfigScalarWhereInput!
}

input PlatformConfigUpdateManyWithoutCoursesShownOnLandingInput {
  connect: [PlatformConfigWhereUniqueInput!]
  connectOrCreate: [PlatformConfigCreateOrConnectWithoutCoursesShownOnLandingInput!]
  create: [PlatformConfigCreateWithoutCoursesShownOnLandingInput!]
  delete: [PlatformConfigWhereUniqueInput!]
  deleteMany: [PlatformConfigScalarWhereInput!]
  disconnect: [PlatformConfigWhereUniqueInput!]
  set: [PlatformConfigWhereUniqueInput!]
  update: [PlatformConfigUpdateWithWhereUniqueWithoutCoursesShownOnLandingInput!]
  updateMany: [PlatformConfigUpdateManyWithWhereWithoutCoursesShownOnLandingInput!]
  upsert: [PlatformConfigUpsertWithWhereUniqueWithoutCoursesShownOnLandingInput!]
}

input PlatformConfigUpdateManyWithoutEventsShownOnLandingInput {
  connect: [PlatformConfigWhereUniqueInput!]
  connectOrCreate: [PlatformConfigCreateOrConnectWithoutEventsShownOnLandingInput!]
  create: [PlatformConfigCreateWithoutEventsShownOnLandingInput!]
  delete: [PlatformConfigWhereUniqueInput!]
  deleteMany: [PlatformConfigScalarWhereInput!]
  disconnect: [PlatformConfigWhereUniqueInput!]
  set: [PlatformConfigWhereUniqueInput!]
  update: [PlatformConfigUpdateWithWhereUniqueWithoutEventsShownOnLandingInput!]
  updateMany: [PlatformConfigUpdateManyWithWhereWithoutEventsShownOnLandingInput!]
  upsert: [PlatformConfigUpsertWithWhereUniqueWithoutEventsShownOnLandingInput!]
}

input PlatformConfigUpdateWithWhereUniqueWithoutCoursesShownOnLandingInput {
  data: PlatformConfigUpdateWithoutCoursesShownOnLandingInput!
  where: PlatformConfigWhereUniqueInput!
}

input PlatformConfigUpdateWithWhereUniqueWithoutEventsShownOnLandingInput {
  data: PlatformConfigUpdateWithoutEventsShownOnLandingInput!
  where: PlatformConfigWhereUniqueInput!
}

input PlatformConfigUpdateWithoutCoursesShownOnLandingInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  eventsShownOnLanding: EventUpdateManyWithoutPlatformConfigShowedInput
  platformDescription: StringFieldUpdateOperationsInput
  platformShortDescription: StringFieldUpdateOperationsInput
  platformTagline: StringFieldUpdateOperationsInput
  platformTitle: StringFieldUpdateOperationsInput
  totalBudgetInvestment: IntFieldUpdateOperationsInput
  totalCompanyCount: IntFieldUpdateOperationsInput
  totalExtraBudgetInvestment: IntFieldUpdateOperationsInput
  totalcourseCount: IntFieldUpdateOperationsInput
}

input PlatformConfigUpdateWithoutEventsShownOnLandingInput {
  coursesShownOnLanding: CourseUpdateManyWithoutPlatformConfigShowedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  platformDescription: StringFieldUpdateOperationsInput
  platformShortDescription: StringFieldUpdateOperationsInput
  platformTagline: StringFieldUpdateOperationsInput
  platformTitle: StringFieldUpdateOperationsInput
  totalBudgetInvestment: IntFieldUpdateOperationsInput
  totalCompanyCount: IntFieldUpdateOperationsInput
  totalExtraBudgetInvestment: IntFieldUpdateOperationsInput
  totalcourseCount: IntFieldUpdateOperationsInput
}

input PlatformConfigUpsertWithWhereUniqueWithoutCoursesShownOnLandingInput {
  create: PlatformConfigCreateWithoutCoursesShownOnLandingInput!
  update: PlatformConfigUpdateWithoutCoursesShownOnLandingInput!
  where: PlatformConfigWhereUniqueInput!
}

input PlatformConfigUpsertWithWhereUniqueWithoutEventsShownOnLandingInput {
  create: PlatformConfigCreateWithoutEventsShownOnLandingInput!
  update: PlatformConfigUpdateWithoutEventsShownOnLandingInput!
  where: PlatformConfigWhereUniqueInput!
}

input PlatformConfigWhereInput {
  AND: [PlatformConfigWhereInput!]
  NOT: [PlatformConfigWhereInput!]
  OR: [PlatformConfigWhereInput!]
  coursesShownOnLanding: CourseListRelationFilter
  createdAt: DateTimeFilter
  eventsShownOnLanding: EventListRelationFilter
  id: IntFilter
  platformDescription: StringFilter
  platformShortDescription: StringFilter
  platformTagline: StringFilter
  platformTitle: StringFilter
  totalBudgetInvestment: IntFilter
  totalCompanyCount: IntFilter
  totalExtraBudgetInvestment: IntFilter
  totalcourseCount: IntFilter
}

input PlatformConfigWhereUniqueInput {
  id: Int
}

type Post {
  article: Article
  articleBody: String
  createdAt: DateTime!
  description: String!
  id: Int!
  postMedia(after: MediaWhereUniqueInput, before: MediaWhereUniqueInput, first: Int, last: Int): [Media!]!
  poster: Media
  title: String!
}

input PostCreateInput {
  articleBody: String!
  description: String!
  title: String!
}

input PostCreateManyPosterInput {
  articleBody: String
  createdAt: DateTime
  description: String!
  id: Int
  title: String!
}

input PostCreateManyPosterInputEnvelope {
  data: [PostCreateManyPosterInput!]
  skipDuplicates: Boolean
}

input PostCreateNestedManyWithoutPosterInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutPosterInput!]
  create: [PostCreateWithoutPosterInput!]
  createMany: PostCreateManyPosterInputEnvelope
}

input PostCreateNestedOneWithoutArticleInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutArticleInput
  create: PostCreateWithoutArticleInput
}

input PostCreateNestedOneWithoutPostMediaInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutPostMediaInput
  create: PostCreateWithoutPostMediaInput
}

input PostCreateOrConnectWithoutArticleInput {
  create: PostCreateWithoutArticleInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutPostMediaInput {
  create: PostCreateWithoutPostMediaInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutPosterInput {
  create: PostCreateWithoutPosterInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutArticleInput {
  articleBody: String
  createdAt: DateTime
  description: String!
  postMedia: MediaCreateNestedManyWithoutPostMediaInput
  poster: MediaCreateNestedOneWithoutPostInput
  title: String!
}

input PostCreateWithoutPostMediaInput {
  article: ArticleCreateNestedOneWithoutPostInput
  articleBody: String
  createdAt: DateTime
  description: String!
  poster: MediaCreateNestedOneWithoutPostInput
  title: String!
}

input PostCreateWithoutPosterInput {
  article: ArticleCreateNestedOneWithoutPostInput
  articleBody: String
  createdAt: DateTime
  description: String!
  postMedia: MediaCreateNestedManyWithoutPostMediaInput
  title: String!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostOrderByWithRelationInput {
  article: ArticleOrderByWithRelationInput
  articleBody: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  postMedia: MediaOrderByRelationAggregateInput
  poster: MediaOrderByWithRelationInput
  posterId: SortOrder
  title: SortOrder
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  articleBody: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: IntFilter
  posterId: IntNullableFilter
  title: StringFilter
}

input PostUpdateManyMutationInput {
  articleBody: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateManyWithWhereWithoutPosterInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithoutPosterInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutPosterInput!]
  create: [PostCreateWithoutPosterInput!]
  createMany: PostCreateManyPosterInputEnvelope
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutPosterInput!]
  updateMany: [PostUpdateManyWithWhereWithoutPosterInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutPosterInput!]
}

input PostUpdateOneWithoutArticleInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutArticleInput
  create: PostCreateWithoutArticleInput
  delete: Boolean
  disconnect: Boolean
  update: PostUpdateWithoutArticleInput
  upsert: PostUpsertWithoutArticleInput
}

input PostUpdateOneWithoutPostMediaInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutPostMediaInput
  create: PostCreateWithoutPostMediaInput
  delete: Boolean
  disconnect: Boolean
  update: PostUpdateWithoutPostMediaInput
  upsert: PostUpsertWithoutPostMediaInput
}

input PostUpdateWithWhereUniqueWithoutPosterInput {
  data: PostUpdateWithoutPosterInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithoutArticleInput {
  articleBody: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  postMedia: MediaUpdateManyWithoutPostMediaInput
  poster: MediaUpdateOneWithoutPostInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateWithoutPostMediaInput {
  article: ArticleUpdateOneWithoutPostInput
  articleBody: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  poster: MediaUpdateOneWithoutPostInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateWithoutPosterInput {
  article: ArticleUpdateOneWithoutPostInput
  articleBody: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  postMedia: MediaUpdateManyWithoutPostMediaInput
  title: StringFieldUpdateOperationsInput
}

input PostUpsertWithWhereUniqueWithoutPosterInput {
  create: PostCreateWithoutPosterInput!
  update: PostUpdateWithoutPosterInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutArticleInput {
  create: PostCreateWithoutArticleInput!
  update: PostUpdateWithoutArticleInput!
}

input PostUpsertWithoutPostMediaInput {
  create: PostCreateWithoutPostMediaInput!
  update: PostUpdateWithoutPostMediaInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  article: ArticleWhereInput
  articleBody: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: IntFilter
  postMedia: MediaListRelationFilter
  poster: MediaWhereInput
  posterId: IntNullableFilter
  title: StringFilter
}

input PostWhereUniqueInput {
  id: Int
}

type Query {
  course(where: CourseWhereUniqueInput!): Course
  courses(after: CourseWhereUniqueInput, before: CourseWhereUniqueInput, first: Int, last: Int, orderBy: [CourseOrderByWithRelationInput!], where: CourseWhereInput): [Course!]!
  event(where: EventWhereUniqueInput!): Event
  events(after: EventWhereUniqueInput, before: EventWhereUniqueInput, first: Int, last: Int, orderBy: [EventOrderByWithRelationInput!], where: EventWhereInput): [Event!]!
  getMessageInGroup(data: getMessageInGroupInput!): MessagerGroup
  getMessageInStream(data: getMessageInStreamInput!): [StreamMessage]
  getMyGroups: [MessagerGroup]
  getPlatformConfig: PlatformConfig
  getUsersInGroup(data: getUsersInGroupInput!): [User]
  getUsersWhichCanAddToGroup(data: getUsersWhichCantAddToGroupInput!): [User]
  me: User
  media(after: MediaWhereUniqueInput, before: MediaWhereUniqueInput, first: Int, last: Int, where: MediaWhereInput): [Media!]!
  post(where: PostWhereUniqueInput!): Post
  postQuery(data: postQueryInput!): Post
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, orderBy: [PostOrderByWithRelationInput!], where: PostWhereInput): [Post!]!
  registeredForEvents(after: RegisteredForEventWhereUniqueInput, before: RegisteredForEventWhereUniqueInput, first: Int, last: Int): [RegisteredForEvent!]!
  stream(where: StreamWhereUniqueInput!): Stream
  streams(after: StreamWhereUniqueInput, before: StreamWhereUniqueInput, first: Int, last: Int): [Stream!]!
  task(where: TaskWhereUniqueInput!): Task
  tasks(after: TaskWhereUniqueInput, before: TaskWhereUniqueInput, first: Int, last: Int): [Task!]!
  test(where: TestWhereUniqueInput!): Test
  testPass(where: TestPassWhereUniqueInput!): TestPass
  testPasses(after: TestPassWhereUniqueInput, before: TestPassWhereUniqueInput, first: Int, last: Int): [TestPass!]!
  tests(after: TestWhereUniqueInput, before: TestWhereUniqueInput, first: Int, last: Int): [Test!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: [UserOrderByWithRelationInput!], where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

input RegisterForEventInput {
  email: String!
  eventId: Int!
  name: String!
  surname: String!
  verdict: registeredVerdict
}

type RegisteredForEvent {
  email: String!
  event: Event!
  id: Int!
  name: String!
  surname: String!
}

input RegisteredForEventCreateManyEventInput {
  email: String!
  id: Int
  name: String!
  surname: String!
}

input RegisteredForEventCreateManyEventInputEnvelope {
  data: [RegisteredForEventCreateManyEventInput!]
  skipDuplicates: Boolean
}

input RegisteredForEventCreateNestedManyWithoutEventInput {
  connect: [RegisteredForEventWhereUniqueInput!]
  connectOrCreate: [RegisteredForEventCreateOrConnectWithoutEventInput!]
  create: [RegisteredForEventCreateWithoutEventInput!]
  createMany: RegisteredForEventCreateManyEventInputEnvelope
}

input RegisteredForEventCreateOrConnectWithoutEventInput {
  create: RegisteredForEventCreateWithoutEventInput!
  where: RegisteredForEventWhereUniqueInput!
}

input RegisteredForEventCreateWithoutEventInput {
  email: String!
  name: String!
  surname: String!
}

input RegisteredForEventListRelationFilter {
  every: RegisteredForEventWhereInput
  none: RegisteredForEventWhereInput
  some: RegisteredForEventWhereInput
}

input RegisteredForEventOrderByRelationAggregateInput {
  _count: SortOrder
}

input RegisteredForEventScalarWhereInput {
  AND: [RegisteredForEventScalarWhereInput!]
  NOT: [RegisteredForEventScalarWhereInput!]
  OR: [RegisteredForEventScalarWhereInput!]
  email: StringFilter
  eventId: IntFilter
  id: IntFilter
  name: StringFilter
  surname: StringFilter
}

input RegisteredForEventUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  surname: StringFieldUpdateOperationsInput
}

input RegisteredForEventUpdateManyWithWhereWithoutEventInput {
  data: RegisteredForEventUpdateManyMutationInput!
  where: RegisteredForEventScalarWhereInput!
}

input RegisteredForEventUpdateManyWithoutEventInput {
  connect: [RegisteredForEventWhereUniqueInput!]
  connectOrCreate: [RegisteredForEventCreateOrConnectWithoutEventInput!]
  create: [RegisteredForEventCreateWithoutEventInput!]
  createMany: RegisteredForEventCreateManyEventInputEnvelope
  delete: [RegisteredForEventWhereUniqueInput!]
  deleteMany: [RegisteredForEventScalarWhereInput!]
  disconnect: [RegisteredForEventWhereUniqueInput!]
  set: [RegisteredForEventWhereUniqueInput!]
  update: [RegisteredForEventUpdateWithWhereUniqueWithoutEventInput!]
  updateMany: [RegisteredForEventUpdateManyWithWhereWithoutEventInput!]
  upsert: [RegisteredForEventUpsertWithWhereUniqueWithoutEventInput!]
}

input RegisteredForEventUpdateWithWhereUniqueWithoutEventInput {
  data: RegisteredForEventUpdateWithoutEventInput!
  where: RegisteredForEventWhereUniqueInput!
}

input RegisteredForEventUpdateWithoutEventInput {
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  surname: StringFieldUpdateOperationsInput
}

input RegisteredForEventUpsertWithWhereUniqueWithoutEventInput {
  create: RegisteredForEventCreateWithoutEventInput!
  update: RegisteredForEventUpdateWithoutEventInput!
  where: RegisteredForEventWhereUniqueInput!
}

input RegisteredForEventWhereInput {
  AND: [RegisteredForEventWhereInput!]
  NOT: [RegisteredForEventWhereInput!]
  OR: [RegisteredForEventWhereInput!]
  email: StringFilter
  event: EventWhereInput
  eventId: IntFilter
  id: IntFilter
  name: StringFilter
  surname: StringFilter
}

input RegisteredForEventWhereUniqueInput {
  id: Int
}

type Section {
  article: Article!
  id: Int!
  media: Media
  number: Int!
  text: String
  type: sectionTypes!
}

input SectionCreateManyArticleInput {
  id: Int
  mediaID: Int
  number: Int!
  text: String
  type: sectionTypes!
}

input SectionCreateManyArticleInputEnvelope {
  data: [SectionCreateManyArticleInput!]
  skipDuplicates: Boolean
}

input SectionCreateManyMediaInput {
  articleID: Int!
  id: Int
  number: Int!
  text: String
  type: sectionTypes!
}

input SectionCreateManyMediaInputEnvelope {
  data: [SectionCreateManyMediaInput!]
  skipDuplicates: Boolean
}

input SectionCreateNestedManyWithoutArticleInput {
  connect: [SectionWhereUniqueInput!]
  connectOrCreate: [SectionCreateOrConnectWithoutArticleInput!]
  create: [SectionCreateWithoutArticleInput!]
  createMany: SectionCreateManyArticleInputEnvelope
}

input SectionCreateNestedManyWithoutMediaInput {
  connect: [SectionWhereUniqueInput!]
  connectOrCreate: [SectionCreateOrConnectWithoutMediaInput!]
  create: [SectionCreateWithoutMediaInput!]
  createMany: SectionCreateManyMediaInputEnvelope
}

input SectionCreateOrConnectWithoutArticleInput {
  create: SectionCreateWithoutArticleInput!
  where: SectionWhereUniqueInput!
}

input SectionCreateOrConnectWithoutMediaInput {
  create: SectionCreateWithoutMediaInput!
  where: SectionWhereUniqueInput!
}

input SectionCreateWithoutArticleInput {
  media: MediaCreateNestedOneWithoutSectionInput
  number: Int!
  text: String
  type: sectionTypes!
}

input SectionCreateWithoutMediaInput {
  article: ArticleCreateNestedOneWithoutSectionsInput!
  number: Int!
  text: String
  type: sectionTypes!
}

input SectionListRelationFilter {
  every: SectionWhereInput
  none: SectionWhereInput
  some: SectionWhereInput
}

input SectionOrderByRelationAggregateInput {
  _count: SortOrder
}

input SectionScalarWhereInput {
  AND: [SectionScalarWhereInput!]
  NOT: [SectionScalarWhereInput!]
  OR: [SectionScalarWhereInput!]
  articleID: IntFilter
  id: IntFilter
  mediaID: IntNullableFilter
  number: IntFilter
  text: StringNullableFilter
  type: EnumsectionTypesFilter
}

input SectionUpdateManyMutationInput {
  number: IntFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  type: EnumsectionTypesFieldUpdateOperationsInput
}

input SectionUpdateManyWithWhereWithoutArticleInput {
  data: SectionUpdateManyMutationInput!
  where: SectionScalarWhereInput!
}

input SectionUpdateManyWithWhereWithoutMediaInput {
  data: SectionUpdateManyMutationInput!
  where: SectionScalarWhereInput!
}

input SectionUpdateManyWithoutArticleInput {
  connect: [SectionWhereUniqueInput!]
  connectOrCreate: [SectionCreateOrConnectWithoutArticleInput!]
  create: [SectionCreateWithoutArticleInput!]
  createMany: SectionCreateManyArticleInputEnvelope
  delete: [SectionWhereUniqueInput!]
  deleteMany: [SectionScalarWhereInput!]
  disconnect: [SectionWhereUniqueInput!]
  set: [SectionWhereUniqueInput!]
  update: [SectionUpdateWithWhereUniqueWithoutArticleInput!]
  updateMany: [SectionUpdateManyWithWhereWithoutArticleInput!]
  upsert: [SectionUpsertWithWhereUniqueWithoutArticleInput!]
}

input SectionUpdateManyWithoutMediaInput {
  connect: [SectionWhereUniqueInput!]
  connectOrCreate: [SectionCreateOrConnectWithoutMediaInput!]
  create: [SectionCreateWithoutMediaInput!]
  createMany: SectionCreateManyMediaInputEnvelope
  delete: [SectionWhereUniqueInput!]
  deleteMany: [SectionScalarWhereInput!]
  disconnect: [SectionWhereUniqueInput!]
  set: [SectionWhereUniqueInput!]
  update: [SectionUpdateWithWhereUniqueWithoutMediaInput!]
  updateMany: [SectionUpdateManyWithWhereWithoutMediaInput!]
  upsert: [SectionUpsertWithWhereUniqueWithoutMediaInput!]
}

input SectionUpdateWithWhereUniqueWithoutArticleInput {
  data: SectionUpdateWithoutArticleInput!
  where: SectionWhereUniqueInput!
}

input SectionUpdateWithWhereUniqueWithoutMediaInput {
  data: SectionUpdateWithoutMediaInput!
  where: SectionWhereUniqueInput!
}

input SectionUpdateWithoutArticleInput {
  media: MediaUpdateOneWithoutSectionInput
  number: IntFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  type: EnumsectionTypesFieldUpdateOperationsInput
}

input SectionUpdateWithoutMediaInput {
  article: ArticleUpdateOneRequiredWithoutSectionsInput
  number: IntFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  type: EnumsectionTypesFieldUpdateOperationsInput
}

input SectionUpsertWithWhereUniqueWithoutArticleInput {
  create: SectionCreateWithoutArticleInput!
  update: SectionUpdateWithoutArticleInput!
  where: SectionWhereUniqueInput!
}

input SectionUpsertWithWhereUniqueWithoutMediaInput {
  create: SectionCreateWithoutMediaInput!
  update: SectionUpdateWithoutMediaInput!
  where: SectionWhereUniqueInput!
}

input SectionWhereInput {
  AND: [SectionWhereInput!]
  NOT: [SectionWhereInput!]
  OR: [SectionWhereInput!]
  article: ArticleWhereInput
  articleID: IntFilter
  id: IntFilter
  media: MediaWhereInput
  mediaID: IntNullableFilter
  number: IntFilter
  text: StringNullableFilter
  type: EnumsectionTypesFilter
}

input SectionWhereUniqueInput {
  id: Int
}

input SignInInput {
  login: String!
  password: String!
}

type SignUrlEventPoster {
  fileName: String
  signedURL: String
}

type SignUrlPostPoster {
  fileName: String
  signedURL: String
}

type SignUrlProjectPoster {
  fileName: String
  signedURL: String
}

type SignUrlProjectPresentationMedia {
  fileName: String
  signedURL: String
}

type SignUrlResponse {
  fileName: String
  mediaId: Int
  mediaURL: String
  signedURL: String
}

type SignUrlUserAvatar {
  fileName: String
  signedURL: String
}

enum SortOrder {
  asc
  desc
}

type Stream {
  active: Boolean!
  id: Int!
  name: String!
  streamKey: String!
}

input StreamCreateInput {
  active: Boolean
  name: String
  streamKey: String
}

type StreamMessage {
  createdAt: DateTime!
  id: Int!
  sender: User!
  text: String!
}

input StreamMessageCreateManySenderInput {
  createdAt: DateTime
  id: Int
  streamId: Int!
  text: String!
}

input StreamMessageCreateManySenderInputEnvelope {
  data: [StreamMessageCreateManySenderInput!]
  skipDuplicates: Boolean
}

input StreamMessageCreateNestedManyWithoutSenderInput {
  connect: [StreamMessageWhereUniqueInput!]
  connectOrCreate: [StreamMessageCreateOrConnectWithoutSenderInput!]
  create: [StreamMessageCreateWithoutSenderInput!]
  createMany: StreamMessageCreateManySenderInputEnvelope
}

input StreamMessageCreateOrConnectWithoutSenderInput {
  create: StreamMessageCreateWithoutSenderInput!
  where: StreamMessageWhereUniqueInput!
}

input StreamMessageCreateWithoutSenderInput {
  createdAt: DateTime
  streamId: Int!
  text: String!
}

input StreamMessageListRelationFilter {
  every: StreamMessageWhereInput
  none: StreamMessageWhereInput
  some: StreamMessageWhereInput
}

input StreamMessageOrderByRelationAggregateInput {
  _count: SortOrder
}

input StreamMessageScalarWhereInput {
  AND: [StreamMessageScalarWhereInput!]
  NOT: [StreamMessageScalarWhereInput!]
  OR: [StreamMessageScalarWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  senderId: IntFilter
  streamId: IntFilter
  text: StringFilter
}

input StreamMessageUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  streamId: IntFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
}

input StreamMessageUpdateManyWithWhereWithoutSenderInput {
  data: StreamMessageUpdateManyMutationInput!
  where: StreamMessageScalarWhereInput!
}

input StreamMessageUpdateManyWithoutSenderInput {
  connect: [StreamMessageWhereUniqueInput!]
  connectOrCreate: [StreamMessageCreateOrConnectWithoutSenderInput!]
  create: [StreamMessageCreateWithoutSenderInput!]
  createMany: StreamMessageCreateManySenderInputEnvelope
  delete: [StreamMessageWhereUniqueInput!]
  deleteMany: [StreamMessageScalarWhereInput!]
  disconnect: [StreamMessageWhereUniqueInput!]
  set: [StreamMessageWhereUniqueInput!]
  update: [StreamMessageUpdateWithWhereUniqueWithoutSenderInput!]
  updateMany: [StreamMessageUpdateManyWithWhereWithoutSenderInput!]
  upsert: [StreamMessageUpsertWithWhereUniqueWithoutSenderInput!]
}

input StreamMessageUpdateWithWhereUniqueWithoutSenderInput {
  data: StreamMessageUpdateWithoutSenderInput!
  where: StreamMessageWhereUniqueInput!
}

input StreamMessageUpdateWithoutSenderInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  streamId: IntFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
}

input StreamMessageUpsertWithWhereUniqueWithoutSenderInput {
  create: StreamMessageCreateWithoutSenderInput!
  update: StreamMessageUpdateWithoutSenderInput!
  where: StreamMessageWhereUniqueInput!
}

input StreamMessageWhereInput {
  AND: [StreamMessageWhereInput!]
  NOT: [StreamMessageWhereInput!]
  OR: [StreamMessageWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  sender: UserWhereInput
  senderId: IntFilter
  streamId: IntFilter
  text: StringFilter
}

input StreamMessageWhereUniqueInput {
  id: Int
}

input StreamUpdateInput {
  active: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  streamKey: StringFieldUpdateOperationsInput
}

input StreamWhereUniqueInput {
  id: Int
  streamKey: String
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

type Subscription {
  newMessage(data: subscriptionMessageInGroup!): Message
  streamChat(data: subscriptionMessageInStream!): StreamMessage
}

type Task {
  answers: [String!]!
  cost: Float!
  id: Int!
  question: String!
  rightAnswer: String!
  test: Test!
}

input TaskCreateInput {
  answers: TaskCreateanswersInput
  cost: Float
  question: String!
  rightAnswer: String!
  test: TestCreateNestedOneWithoutTasksInput!
}

input TaskCreateManyTestInput {
  answers: TaskCreateManyanswersInput
  cost: Float
  id: Int
  question: String!
  rightAnswer: String!
}

input TaskCreateManyTestInputEnvelope {
  data: [TaskCreateManyTestInput!]
  skipDuplicates: Boolean
}

input TaskCreateManyanswersInput {
  set: [String!]
}

input TaskCreateNestedManyWithoutTestInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutTestInput!]
  create: [TaskCreateWithoutTestInput!]
  createMany: TaskCreateManyTestInputEnvelope
}

input TaskCreateOrConnectWithoutTestInput {
  create: TaskCreateWithoutTestInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateWithoutTestInput {
  answers: TaskCreateanswersInput
  cost: Float
  question: String!
  rightAnswer: String!
}

input TaskCreateanswersInput {
  set: [String!]
}

input TaskListRelationFilter {
  every: TaskWhereInput
  none: TaskWhereInput
  some: TaskWhereInput
}

input TaskScalarWhereInput {
  AND: [TaskScalarWhereInput!]
  NOT: [TaskScalarWhereInput!]
  OR: [TaskScalarWhereInput!]
  answers: StringNullableListFilter
  cost: FloatFilter
  id: IntFilter
  question: StringFilter
  rightAnswer: StringFilter
  testId: IntFilter
}

input TaskUpdateInput {
  answers: TaskUpdateanswersInput
  cost: FloatFieldUpdateOperationsInput
  question: StringFieldUpdateOperationsInput
  rightAnswer: StringFieldUpdateOperationsInput
  test: TestUpdateOneRequiredWithoutTasksInput
}

input TaskUpdateManyMutationInput {
  answers: TaskUpdateanswersInput
  cost: FloatFieldUpdateOperationsInput
  question: StringFieldUpdateOperationsInput
  rightAnswer: StringFieldUpdateOperationsInput
}

input TaskUpdateManyWithWhereWithoutTestInput {
  data: TaskUpdateManyMutationInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateManyWithoutTestInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutTestInput!]
  create: [TaskCreateWithoutTestInput!]
  createMany: TaskCreateManyTestInputEnvelope
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutTestInput!]
  updateMany: [TaskUpdateManyWithWhereWithoutTestInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutTestInput!]
}

input TaskUpdateWithWhereUniqueWithoutTestInput {
  data: TaskUpdateWithoutTestInput!
  where: TaskWhereUniqueInput!
}

input TaskUpdateWithoutTestInput {
  answers: TaskUpdateanswersInput
  cost: FloatFieldUpdateOperationsInput
  question: StringFieldUpdateOperationsInput
  rightAnswer: StringFieldUpdateOperationsInput
}

input TaskUpdateanswersInput {
  push: String
  set: [String!]
}

input TaskUpsertWithWhereUniqueWithoutTestInput {
  create: TaskCreateWithoutTestInput!
  update: TaskUpdateWithoutTestInput!
  where: TaskWhereUniqueInput!
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  answers: StringNullableListFilter
  cost: FloatFilter
  id: IntFilter
  question: StringFilter
  rightAnswer: StringFilter
  test: TestWhereInput
  testId: IntFilter
}

input TaskWhereUniqueInput {
  id: Int
}

type Test {
  id: Int!
  name: String!
  tasks(after: TaskWhereUniqueInput, before: TaskWhereUniqueInput, first: Int, last: Int): [Task!]!
  testPasses(after: TestPassWhereUniqueInput, before: TestPassWhereUniqueInput, first: Int, last: Int): [TestPass!]!
}

input TestCreateInput {
  name: String!
  tasks: TaskCreateNestedManyWithoutTestInput
  testPasses: TestPassCreateNestedManyWithoutTestInput
}

input TestCreateNestedOneWithoutTasksInput {
  connect: TestWhereUniqueInput
  connectOrCreate: TestCreateOrConnectWithoutTasksInput
  create: TestCreateWithoutTasksInput
}

input TestCreateNestedOneWithoutTestPassesInput {
  connect: TestWhereUniqueInput
  connectOrCreate: TestCreateOrConnectWithoutTestPassesInput
  create: TestCreateWithoutTestPassesInput
}

input TestCreateOrConnectWithoutTasksInput {
  create: TestCreateWithoutTasksInput!
  where: TestWhereUniqueInput!
}

input TestCreateOrConnectWithoutTestPassesInput {
  create: TestCreateWithoutTestPassesInput!
  where: TestWhereUniqueInput!
}

input TestCreateWithoutTasksInput {
  name: String!
  testPasses: TestPassCreateNestedManyWithoutTestInput
}

input TestCreateWithoutTestPassesInput {
  name: String!
  tasks: TaskCreateNestedManyWithoutTestInput
}

type TestPass {
  id: Int!
  score: Float!
  test: Test!
  user: User!
}

input TestPassCreateInput {
  score: Float!
  test: TestCreateNestedOneWithoutTestPassesInput!
  user: UserCreateNestedOneWithoutTestPassesInput!
}

input TestPassCreateManyTestInput {
  id: Int
  score: Float!
  userId: Int!
}

input TestPassCreateManyTestInputEnvelope {
  data: [TestPassCreateManyTestInput!]
  skipDuplicates: Boolean
}

input TestPassCreateManyUserInput {
  id: Int
  score: Float!
  testId: Int!
}

input TestPassCreateManyUserInputEnvelope {
  data: [TestPassCreateManyUserInput!]
  skipDuplicates: Boolean
}

input TestPassCreateNestedManyWithoutTestInput {
  connect: [TestPassWhereUniqueInput!]
  connectOrCreate: [TestPassCreateOrConnectWithoutTestInput!]
  create: [TestPassCreateWithoutTestInput!]
  createMany: TestPassCreateManyTestInputEnvelope
}

input TestPassCreateNestedManyWithoutUserInput {
  connect: [TestPassWhereUniqueInput!]
  connectOrCreate: [TestPassCreateOrConnectWithoutUserInput!]
  create: [TestPassCreateWithoutUserInput!]
  createMany: TestPassCreateManyUserInputEnvelope
}

input TestPassCreateOrConnectWithoutTestInput {
  create: TestPassCreateWithoutTestInput!
  where: TestPassWhereUniqueInput!
}

input TestPassCreateOrConnectWithoutUserInput {
  create: TestPassCreateWithoutUserInput!
  where: TestPassWhereUniqueInput!
}

input TestPassCreateWithoutTestInput {
  score: Float!
  user: UserCreateNestedOneWithoutTestPassesInput!
}

input TestPassCreateWithoutUserInput {
  score: Float!
  test: TestCreateNestedOneWithoutTestPassesInput!
}

input TestPassListRelationFilter {
  every: TestPassWhereInput
  none: TestPassWhereInput
  some: TestPassWhereInput
}

input TestPassOrderByRelationAggregateInput {
  _count: SortOrder
}

input TestPassScalarWhereInput {
  AND: [TestPassScalarWhereInput!]
  NOT: [TestPassScalarWhereInput!]
  OR: [TestPassScalarWhereInput!]
  id: IntFilter
  score: FloatFilter
  testId: IntFilter
  userId: IntFilter
}

input TestPassUpdateInput {
  score: FloatFieldUpdateOperationsInput
  test: TestUpdateOneRequiredWithoutTestPassesInput
  user: UserUpdateOneRequiredWithoutTestPassesInput
}

input TestPassUpdateManyMutationInput {
  score: FloatFieldUpdateOperationsInput
}

input TestPassUpdateManyWithWhereWithoutTestInput {
  data: TestPassUpdateManyMutationInput!
  where: TestPassScalarWhereInput!
}

input TestPassUpdateManyWithWhereWithoutUserInput {
  data: TestPassUpdateManyMutationInput!
  where: TestPassScalarWhereInput!
}

input TestPassUpdateManyWithoutTestInput {
  connect: [TestPassWhereUniqueInput!]
  connectOrCreate: [TestPassCreateOrConnectWithoutTestInput!]
  create: [TestPassCreateWithoutTestInput!]
  createMany: TestPassCreateManyTestInputEnvelope
  delete: [TestPassWhereUniqueInput!]
  deleteMany: [TestPassScalarWhereInput!]
  disconnect: [TestPassWhereUniqueInput!]
  set: [TestPassWhereUniqueInput!]
  update: [TestPassUpdateWithWhereUniqueWithoutTestInput!]
  updateMany: [TestPassUpdateManyWithWhereWithoutTestInput!]
  upsert: [TestPassUpsertWithWhereUniqueWithoutTestInput!]
}

input TestPassUpdateManyWithoutUserInput {
  connect: [TestPassWhereUniqueInput!]
  connectOrCreate: [TestPassCreateOrConnectWithoutUserInput!]
  create: [TestPassCreateWithoutUserInput!]
  createMany: TestPassCreateManyUserInputEnvelope
  delete: [TestPassWhereUniqueInput!]
  deleteMany: [TestPassScalarWhereInput!]
  disconnect: [TestPassWhereUniqueInput!]
  set: [TestPassWhereUniqueInput!]
  update: [TestPassUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [TestPassUpdateManyWithWhereWithoutUserInput!]
  upsert: [TestPassUpsertWithWhereUniqueWithoutUserInput!]
}

input TestPassUpdateWithWhereUniqueWithoutTestInput {
  data: TestPassUpdateWithoutTestInput!
  where: TestPassWhereUniqueInput!
}

input TestPassUpdateWithWhereUniqueWithoutUserInput {
  data: TestPassUpdateWithoutUserInput!
  where: TestPassWhereUniqueInput!
}

input TestPassUpdateWithoutTestInput {
  score: FloatFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutTestPassesInput
}

input TestPassUpdateWithoutUserInput {
  score: FloatFieldUpdateOperationsInput
  test: TestUpdateOneRequiredWithoutTestPassesInput
}

input TestPassUpsertWithWhereUniqueWithoutTestInput {
  create: TestPassCreateWithoutTestInput!
  update: TestPassUpdateWithoutTestInput!
  where: TestPassWhereUniqueInput!
}

input TestPassUpsertWithWhereUniqueWithoutUserInput {
  create: TestPassCreateWithoutUserInput!
  update: TestPassUpdateWithoutUserInput!
  where: TestPassWhereUniqueInput!
}

input TestPassWhereInput {
  AND: [TestPassWhereInput!]
  NOT: [TestPassWhereInput!]
  OR: [TestPassWhereInput!]
  id: IntFilter
  score: FloatFilter
  test: TestWhereInput
  testId: IntFilter
  user: UserWhereInput
  userId: IntFilter
}

input TestPassWhereUniqueInput {
  id: Int
}

input TestUpdateInput {
  name: StringFieldUpdateOperationsInput
  tasks: TaskUpdateManyWithoutTestInput
  testPasses: TestPassUpdateManyWithoutTestInput
}

input TestUpdateOneRequiredWithoutTasksInput {
  connect: TestWhereUniqueInput
  connectOrCreate: TestCreateOrConnectWithoutTasksInput
  create: TestCreateWithoutTasksInput
  update: TestUpdateWithoutTasksInput
  upsert: TestUpsertWithoutTasksInput
}

input TestUpdateOneRequiredWithoutTestPassesInput {
  connect: TestWhereUniqueInput
  connectOrCreate: TestCreateOrConnectWithoutTestPassesInput
  create: TestCreateWithoutTestPassesInput
  update: TestUpdateWithoutTestPassesInput
  upsert: TestUpsertWithoutTestPassesInput
}

input TestUpdateWithoutTasksInput {
  name: StringFieldUpdateOperationsInput
  testPasses: TestPassUpdateManyWithoutTestInput
}

input TestUpdateWithoutTestPassesInput {
  name: StringFieldUpdateOperationsInput
  tasks: TaskUpdateManyWithoutTestInput
}

input TestUpsertWithoutTasksInput {
  create: TestCreateWithoutTasksInput!
  update: TestUpdateWithoutTasksInput!
}

input TestUpsertWithoutTestPassesInput {
  create: TestCreateWithoutTestPassesInput!
  update: TestUpdateWithoutTestPassesInput!
}

input TestWhereInput {
  AND: [TestWhereInput!]
  NOT: [TestWhereInput!]
  OR: [TestWhereInput!]
  id: IntFilter
  name: StringFilter
  tasks: TaskListRelationFilter
  testPasses: TestPassListRelationFilter
}

input TestWhereUniqueInput {
  id: Int
}

input UpdateArticleInput {
  articleId: Int!
  sections: [CreateSectionInput]
}

input UpdateDescriptionInput {
  descriptionId: Int!
  sections: [CreateDescriptionSectionInput]
}

input UpdatePostInput {
  articleBody: String!
  description: String!
  title: String!
}

input UpdateStoryInput {
  sections: [CreateStorySectionInput]
  storyId: Int!
}

type User {
  avatar: Media
  bio: String
  city: String
  createdAt: DateTime!
  email: String!
  firstname: String!
  groups(after: MessagerGroupWhereUniqueInput, before: MessagerGroupWhereUniqueInput, first: Int, last: Int, orderBy: [MessagerGroupOrderByWithRelationInput!]): [MessagerGroup!]!
  id: Int!
  lastname: String!
  login: String!
  messages(after: MessageWhereUniqueInput, before: MessageWhereUniqueInput, first: Int, last: Int): [Message!]!
  password: String!
  publishedEvent(after: EventWhereUniqueInput, before: EventWhereUniqueInput, first: Int, last: Int, orderBy: [EventOrderByWithRelationInput!]): [Event!]!
  role: String!
  shortDescription: String
  tokenVersion: Int
}

input UserCreateManyAvatarInput {
  bio: String
  city: String
  createdAt: DateTime
  email: String!
  firstname: String!
  id: Int
  lastname: String!
  login: String!
  password: String!
  role: String
  shortDescription: String
  tokenVersion: Int
}

input UserCreateManyAvatarInputEnvelope {
  data: [UserCreateManyAvatarInput!]
  skipDuplicates: Boolean
}

input UserCreateNestedManyWithoutAvatarInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutAvatarInput!]
  create: [UserCreateWithoutAvatarInput!]
  createMany: UserCreateManyAvatarInputEnvelope
}

input UserCreateNestedManyWithoutGroupAdminsInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutGroupAdminsInput!]
  create: [UserCreateWithoutGroupAdminsInput!]
}

input UserCreateNestedManyWithoutGroupsInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutGroupsInput!]
  create: [UserCreateWithoutGroupsInput!]
}

input UserCreateNestedOneWithoutCoursesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCoursesInput
  create: UserCreateWithoutCoursesInput
}

input UserCreateNestedOneWithoutMessagesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutMessagesInput
  create: UserCreateWithoutMessagesInput
}

input UserCreateNestedOneWithoutPublishedEventInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPublishedEventInput
  create: UserCreateWithoutPublishedEventInput
}

input UserCreateNestedOneWithoutTestPassesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTestPassesInput
  create: UserCreateWithoutTestPassesInput
}

input UserCreateOrConnectWithoutAvatarInput {
  create: UserCreateWithoutAvatarInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCoursesInput {
  create: UserCreateWithoutCoursesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutGroupAdminsInput {
  create: UserCreateWithoutGroupAdminsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutGroupsInput {
  create: UserCreateWithoutGroupsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPublishedEventInput {
  create: UserCreateWithoutPublishedEventInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTestPassesInput {
  create: UserCreateWithoutTestPassesInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAvatarInput {
  StreamMessage: StreamMessageCreateNestedManyWithoutSenderInput
  bio: String
  city: String
  courses: CourseCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  email: String!
  firstname: String!
  groupAdmins: MessagerGroupCreateNestedManyWithoutAdminsInput
  groups: MessagerGroupCreateNestedManyWithoutMembersInput
  lastname: String!
  login: String!
  messages: MessageCreateNestedManyWithoutSenderInput
  password: String!
  publishedEvent: EventCreateNestedManyWithoutUserInput
  role: String
  shortDescription: String
  testPasses: TestPassCreateNestedManyWithoutUserInput
  tokenVersion: Int
}

input UserCreateWithoutCoursesInput {
  StreamMessage: StreamMessageCreateNestedManyWithoutSenderInput
  avatar: MediaCreateNestedOneWithoutUserInput
  bio: String
  city: String
  createdAt: DateTime
  email: String!
  firstname: String!
  groupAdmins: MessagerGroupCreateNestedManyWithoutAdminsInput
  groups: MessagerGroupCreateNestedManyWithoutMembersInput
  lastname: String!
  login: String!
  messages: MessageCreateNestedManyWithoutSenderInput
  password: String!
  publishedEvent: EventCreateNestedManyWithoutUserInput
  role: String
  shortDescription: String
  testPasses: TestPassCreateNestedManyWithoutUserInput
  tokenVersion: Int
}

input UserCreateWithoutGroupAdminsInput {
  StreamMessage: StreamMessageCreateNestedManyWithoutSenderInput
  avatar: MediaCreateNestedOneWithoutUserInput
  bio: String
  city: String
  courses: CourseCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  email: String!
  firstname: String!
  groups: MessagerGroupCreateNestedManyWithoutMembersInput
  lastname: String!
  login: String!
  messages: MessageCreateNestedManyWithoutSenderInput
  password: String!
  publishedEvent: EventCreateNestedManyWithoutUserInput
  role: String
  shortDescription: String
  testPasses: TestPassCreateNestedManyWithoutUserInput
  tokenVersion: Int
}

input UserCreateWithoutGroupsInput {
  StreamMessage: StreamMessageCreateNestedManyWithoutSenderInput
  avatar: MediaCreateNestedOneWithoutUserInput
  bio: String
  city: String
  courses: CourseCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  email: String!
  firstname: String!
  groupAdmins: MessagerGroupCreateNestedManyWithoutAdminsInput
  lastname: String!
  login: String!
  messages: MessageCreateNestedManyWithoutSenderInput
  password: String!
  publishedEvent: EventCreateNestedManyWithoutUserInput
  role: String
  shortDescription: String
  testPasses: TestPassCreateNestedManyWithoutUserInput
  tokenVersion: Int
}

input UserCreateWithoutMessagesInput {
  StreamMessage: StreamMessageCreateNestedManyWithoutSenderInput
  avatar: MediaCreateNestedOneWithoutUserInput
  bio: String
  city: String
  courses: CourseCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  email: String!
  firstname: String!
  groupAdmins: MessagerGroupCreateNestedManyWithoutAdminsInput
  groups: MessagerGroupCreateNestedManyWithoutMembersInput
  lastname: String!
  login: String!
  password: String!
  publishedEvent: EventCreateNestedManyWithoutUserInput
  role: String
  shortDescription: String
  testPasses: TestPassCreateNestedManyWithoutUserInput
  tokenVersion: Int
}

input UserCreateWithoutPublishedEventInput {
  StreamMessage: StreamMessageCreateNestedManyWithoutSenderInput
  avatar: MediaCreateNestedOneWithoutUserInput
  bio: String
  city: String
  courses: CourseCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  email: String!
  firstname: String!
  groupAdmins: MessagerGroupCreateNestedManyWithoutAdminsInput
  groups: MessagerGroupCreateNestedManyWithoutMembersInput
  lastname: String!
  login: String!
  messages: MessageCreateNestedManyWithoutSenderInput
  password: String!
  role: String
  shortDescription: String
  testPasses: TestPassCreateNestedManyWithoutUserInput
  tokenVersion: Int
}

input UserCreateWithoutTestPassesInput {
  StreamMessage: StreamMessageCreateNestedManyWithoutSenderInput
  avatar: MediaCreateNestedOneWithoutUserInput
  bio: String
  city: String
  courses: CourseCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  email: String!
  firstname: String!
  groupAdmins: MessagerGroupCreateNestedManyWithoutAdminsInput
  groups: MessagerGroupCreateNestedManyWithoutMembersInput
  lastname: String!
  login: String!
  messages: MessageCreateNestedManyWithoutSenderInput
  password: String!
  publishedEvent: EventCreateNestedManyWithoutUserInput
  role: String
  shortDescription: String
  tokenVersion: Int
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithRelationInput {
  StreamMessage: StreamMessageOrderByRelationAggregateInput
  avatar: MediaOrderByWithRelationInput
  avatarId: SortOrder
  bio: SortOrder
  city: SortOrder
  courses: CourseOrderByRelationAggregateInput
  createdAt: SortOrder
  email: SortOrder
  firstname: SortOrder
  groupAdmins: MessagerGroupOrderByRelationAggregateInput
  groups: MessagerGroupOrderByRelationAggregateInput
  id: SortOrder
  lastname: SortOrder
  login: SortOrder
  messages: MessageOrderByRelationAggregateInput
  password: SortOrder
  publishedEvent: EventOrderByRelationAggregateInput
  role: SortOrder
  shortDescription: SortOrder
  testPasses: TestPassOrderByRelationAggregateInput
  tokenVersion: SortOrder
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  avatarId: IntNullableFilter
  bio: StringNullableFilter
  city: StringNullableFilter
  createdAt: DateTimeFilter
  email: StringFilter
  firstname: StringFilter
  id: IntFilter
  lastname: StringFilter
  login: StringFilter
  password: StringFilter
  role: StringFilter
  shortDescription: StringNullableFilter
  tokenVersion: IntNullableFilter
}

input UserUpdateManyMutationInput {
  bio: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstname: StringFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  login: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: StringFieldUpdateOperationsInput
  shortDescription: NullableStringFieldUpdateOperationsInput
  tokenVersion: NullableIntFieldUpdateOperationsInput
}

input UserUpdateManyWithWhereWithoutAvatarInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithWhereWithoutGroupAdminsInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithWhereWithoutGroupsInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithoutAvatarInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutAvatarInput!]
  create: [UserCreateWithoutAvatarInput!]
  createMany: UserCreateManyAvatarInputEnvelope
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutAvatarInput!]
  updateMany: [UserUpdateManyWithWhereWithoutAvatarInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutAvatarInput!]
}

input UserUpdateManyWithoutGroupAdminsInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutGroupAdminsInput!]
  create: [UserCreateWithoutGroupAdminsInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutGroupAdminsInput!]
  updateMany: [UserUpdateManyWithWhereWithoutGroupAdminsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutGroupAdminsInput!]
}

input UserUpdateManyWithoutGroupsInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutGroupsInput!]
  create: [UserCreateWithoutGroupsInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutGroupsInput!]
  updateMany: [UserUpdateManyWithWhereWithoutGroupsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutGroupsInput!]
}

input UserUpdateOneRequiredWithoutCoursesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCoursesInput
  create: UserCreateWithoutCoursesInput
  update: UserUpdateWithoutCoursesInput
  upsert: UserUpsertWithoutCoursesInput
}

input UserUpdateOneRequiredWithoutMessagesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutMessagesInput
  create: UserCreateWithoutMessagesInput
  update: UserUpdateWithoutMessagesInput
  upsert: UserUpsertWithoutMessagesInput
}

input UserUpdateOneRequiredWithoutTestPassesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTestPassesInput
  create: UserCreateWithoutTestPassesInput
  update: UserUpdateWithoutTestPassesInput
  upsert: UserUpsertWithoutTestPassesInput
}

input UserUpdateOneWithoutPublishedEventInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPublishedEventInput
  create: UserCreateWithoutPublishedEventInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutPublishedEventInput
  upsert: UserUpsertWithoutPublishedEventInput
}

input UserUpdateWithWhereUniqueWithoutAvatarInput {
  data: UserUpdateWithoutAvatarInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutGroupAdminsInput {
  data: UserUpdateWithoutGroupAdminsInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutGroupsInput {
  data: UserUpdateWithoutGroupsInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithoutAvatarInput {
  StreamMessage: StreamMessageUpdateManyWithoutSenderInput
  bio: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  courses: CourseUpdateManyWithoutOwnerInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstname: StringFieldUpdateOperationsInput
  groupAdmins: MessagerGroupUpdateManyWithoutAdminsInput
  groups: MessagerGroupUpdateManyWithoutMembersInput
  lastname: StringFieldUpdateOperationsInput
  login: StringFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutSenderInput
  password: StringFieldUpdateOperationsInput
  publishedEvent: EventUpdateManyWithoutUserInput
  role: StringFieldUpdateOperationsInput
  shortDescription: NullableStringFieldUpdateOperationsInput
  testPasses: TestPassUpdateManyWithoutUserInput
  tokenVersion: NullableIntFieldUpdateOperationsInput
}

input UserUpdateWithoutCoursesInput {
  StreamMessage: StreamMessageUpdateManyWithoutSenderInput
  avatar: MediaUpdateOneWithoutUserInput
  bio: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstname: StringFieldUpdateOperationsInput
  groupAdmins: MessagerGroupUpdateManyWithoutAdminsInput
  groups: MessagerGroupUpdateManyWithoutMembersInput
  lastname: StringFieldUpdateOperationsInput
  login: StringFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutSenderInput
  password: StringFieldUpdateOperationsInput
  publishedEvent: EventUpdateManyWithoutUserInput
  role: StringFieldUpdateOperationsInput
  shortDescription: NullableStringFieldUpdateOperationsInput
  testPasses: TestPassUpdateManyWithoutUserInput
  tokenVersion: NullableIntFieldUpdateOperationsInput
}

input UserUpdateWithoutGroupAdminsInput {
  StreamMessage: StreamMessageUpdateManyWithoutSenderInput
  avatar: MediaUpdateOneWithoutUserInput
  bio: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  courses: CourseUpdateManyWithoutOwnerInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstname: StringFieldUpdateOperationsInput
  groups: MessagerGroupUpdateManyWithoutMembersInput
  lastname: StringFieldUpdateOperationsInput
  login: StringFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutSenderInput
  password: StringFieldUpdateOperationsInput
  publishedEvent: EventUpdateManyWithoutUserInput
  role: StringFieldUpdateOperationsInput
  shortDescription: NullableStringFieldUpdateOperationsInput
  testPasses: TestPassUpdateManyWithoutUserInput
  tokenVersion: NullableIntFieldUpdateOperationsInput
}

input UserUpdateWithoutGroupsInput {
  StreamMessage: StreamMessageUpdateManyWithoutSenderInput
  avatar: MediaUpdateOneWithoutUserInput
  bio: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  courses: CourseUpdateManyWithoutOwnerInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstname: StringFieldUpdateOperationsInput
  groupAdmins: MessagerGroupUpdateManyWithoutAdminsInput
  lastname: StringFieldUpdateOperationsInput
  login: StringFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutSenderInput
  password: StringFieldUpdateOperationsInput
  publishedEvent: EventUpdateManyWithoutUserInput
  role: StringFieldUpdateOperationsInput
  shortDescription: NullableStringFieldUpdateOperationsInput
  testPasses: TestPassUpdateManyWithoutUserInput
  tokenVersion: NullableIntFieldUpdateOperationsInput
}

input UserUpdateWithoutMessagesInput {
  StreamMessage: StreamMessageUpdateManyWithoutSenderInput
  avatar: MediaUpdateOneWithoutUserInput
  bio: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  courses: CourseUpdateManyWithoutOwnerInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstname: StringFieldUpdateOperationsInput
  groupAdmins: MessagerGroupUpdateManyWithoutAdminsInput
  groups: MessagerGroupUpdateManyWithoutMembersInput
  lastname: StringFieldUpdateOperationsInput
  login: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  publishedEvent: EventUpdateManyWithoutUserInput
  role: StringFieldUpdateOperationsInput
  shortDescription: NullableStringFieldUpdateOperationsInput
  testPasses: TestPassUpdateManyWithoutUserInput
  tokenVersion: NullableIntFieldUpdateOperationsInput
}

input UserUpdateWithoutPublishedEventInput {
  StreamMessage: StreamMessageUpdateManyWithoutSenderInput
  avatar: MediaUpdateOneWithoutUserInput
  bio: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  courses: CourseUpdateManyWithoutOwnerInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstname: StringFieldUpdateOperationsInput
  groupAdmins: MessagerGroupUpdateManyWithoutAdminsInput
  groups: MessagerGroupUpdateManyWithoutMembersInput
  lastname: StringFieldUpdateOperationsInput
  login: StringFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutSenderInput
  password: StringFieldUpdateOperationsInput
  role: StringFieldUpdateOperationsInput
  shortDescription: NullableStringFieldUpdateOperationsInput
  testPasses: TestPassUpdateManyWithoutUserInput
  tokenVersion: NullableIntFieldUpdateOperationsInput
}

input UserUpdateWithoutTestPassesInput {
  StreamMessage: StreamMessageUpdateManyWithoutSenderInput
  avatar: MediaUpdateOneWithoutUserInput
  bio: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  courses: CourseUpdateManyWithoutOwnerInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstname: StringFieldUpdateOperationsInput
  groupAdmins: MessagerGroupUpdateManyWithoutAdminsInput
  groups: MessagerGroupUpdateManyWithoutMembersInput
  lastname: StringFieldUpdateOperationsInput
  login: StringFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutSenderInput
  password: StringFieldUpdateOperationsInput
  publishedEvent: EventUpdateManyWithoutUserInput
  role: StringFieldUpdateOperationsInput
  shortDescription: NullableStringFieldUpdateOperationsInput
  tokenVersion: NullableIntFieldUpdateOperationsInput
}

input UserUpsertWithWhereUniqueWithoutAvatarInput {
  create: UserCreateWithoutAvatarInput!
  update: UserUpdateWithoutAvatarInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutGroupAdminsInput {
  create: UserCreateWithoutGroupAdminsInput!
  update: UserUpdateWithoutGroupAdminsInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutGroupsInput {
  create: UserCreateWithoutGroupsInput!
  update: UserUpdateWithoutGroupsInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutCoursesInput {
  create: UserCreateWithoutCoursesInput!
  update: UserUpdateWithoutCoursesInput!
}

input UserUpsertWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput!
  update: UserUpdateWithoutMessagesInput!
}

input UserUpsertWithoutPublishedEventInput {
  create: UserCreateWithoutPublishedEventInput!
  update: UserUpdateWithoutPublishedEventInput!
}

input UserUpsertWithoutTestPassesInput {
  create: UserCreateWithoutTestPassesInput!
  update: UserUpdateWithoutTestPassesInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  StreamMessage: StreamMessageListRelationFilter
  avatar: MediaWhereInput
  avatarId: IntNullableFilter
  bio: StringNullableFilter
  city: StringNullableFilter
  courses: CourseListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  firstname: StringFilter
  groupAdmins: MessagerGroupListRelationFilter
  groups: MessagerGroupListRelationFilter
  id: IntFilter
  lastname: StringFilter
  login: StringFilter
  messages: MessageListRelationFilter
  password: StringFilter
  publishedEvent: EventListRelationFilter
  role: StringFilter
  shortDescription: StringNullableFilter
  testPasses: TestPassListRelationFilter
  tokenVersion: IntNullableFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
  login: String
}

input addMembersToGroupInput {
  groupId: Int!
  membersIds: [Int]
}

enum businessModel {
  B2B
  B2B2C
  B2C
  B2G
  C2C
  G2B
  G2C
}

input connectMediaInput {
  entityId: Int!
  entityType: entityTypes!
  mediaURL: String!
}

enum courseMarket {
  AeroNet
  AeroNext
  AutoNet
  EcoNet
  EduNet
  EnergyNet
  FoodNet
  GameNet
  HealthNet
  HomeNet
  Marinet
  NeuroNet
  SafeNet
  SpaceNet
  SportNet
  TechNet
  WearNet
}

enum courseStage {
  ideaOrConcept
  prototypeOrMVP
  scaling
  workingProduct
}

enum courseType {
  hardwareAndSoftwareComplex
  hardwareSolution
  initiativeOfTheRegion
  notDefined
  service
  softwareSolution
  technology
}

enum courseTypeEnum {
  hardwareAndSoftwareComplex
  hardwareSolution
  initiativeOfTheRegion
  notDefined
  service
  softwareSolution
  technology
}

input createCourseInput {
  category: filteringCategoies!
  courseType: courseType
  name: String!
  ownerID: Int!
  shortDescription: String!
}

input createGroupInput {
  membersIds: [Int]
  title: String!
}

input createInviteInput {
  groupId: Int!
}

input createMediaInput {
  entityId: Int
  entityType: entityTypes
  fileType: String!
}

input createStreamArgs {
  eventId: Int
}

input deleteGroupInput {
  groupId: Int!
}

input deleteMediaElementInput {
  mediaURL: String!
}

input deletePostMedia {
  mediaUrl: String!
}

input deleteProjectPresentationMedia {
  mediaUrl: String!
}

input deleteUserInput {
  userId: Int!
}

enum entityTypes {
  courseMaterial
  coursePoster
}

enum enumPostCategory {
  news
  offer
  resource
}

enum enumSectionType {
  image
  text
  video
}

enum filteringCategoies {
  IT
  analytic
  business
  content
  design
  development
  education
  management
}

input getMediaDataInput {
  entityId: Int
  fileName: String
  fileType: String
}

input getMessageInGroupInput {
  groupId: Int!
}

input getMessageInStreamInput {
  streamId: Int!
}

input getUsersInGroupInput {
  groupId: Int!
}

input getUsersWhichCantAddToGroupInput {
  groupId: Int!
}

enum investmentStage {
  angels
  ownInvestments
  preSeed
  seed
  stageA
  stageB
  stageC
}

input leaveFromGroupInput {
  groupId: Int!
}

enum mainGoal {
  biometricsTasks
  computerVisionTasks
  dataMiningTasks
  humanSpeechProcessingTasks
  naturalLanguageProcessingTasks
  tasksOfRecommendationSystems
}

enum mediaType {
  image
  video
}

input postQueryInput {
  postId: Int
}

enum registeredVerdict {
  maybe
  yes
}

input removeGroupAdminInput {
  groupId: Int!
  membersIds: [Int!]
}

input removeMemberFromGroupInput {
  groupId: Int!
  memberId: Int!
}

input removeMembersFromGroupInput {
  groupId: Int!
  membersIds: [Int]
}

enum salesType {
  firstSales
  noSales
  systemSales
}

enum sectionTypes {
  audio
  doc
  image
  pdf
  text
  video
}

input sendMessageInput {
  groupId: Int!
  senderId: Int!
  text: String!
}

input sendStreamMessageInput {
  senderId: Int!
  streamId: Int!
  text: String!
}

input setGroupAdminInput {
  groupId: Int!
  membersIds: [Int!]
}

input subscriptionMessageInGroup {
  groupId: Int!
}

input subscriptionMessageInStream {
  streamId: Int!
}

input switchToMessagerInput {
  recipientId: Int!
  senderId: Int!
}

enum technologyType {
  Prototyping3D
  additiveTechnologies
  artificialIntelligence
  bigDataStorageAndAnalysisTechnologies
  bionics
  carbonFootprintManagement
  collaborativeTechnologies
  distributedRegistryTechnologies
  genobionics
  geoinformationSystems
  greenEnergy
  hydrogenTechnologies
  informationSecurityTechnologies
  machineLearningAndCognitiveTechnologies
  molecularEngineering
  neurotechnologiesVirtualTechnologies
  newProductionTechnologies
  personalizedMedicine
  photonics
  powerPlants
  quantumCommunicationTechnologies
  quantumTechnologies
  renewableMaterialsAndWasteRecycling
  sensorTechnology
  syntheticBiology
  technologiesForControllingBiologicalObjects
  technologiesForCreatingNewAndPortableEnergySources
  technologiesOfElectricPowerTransportation
  technologiesOfModeling
  technologiesOfRoboticsAndMechatronics
  wirelessCommunicationTechnologies
}

input updateCourseInput {
  category: filteringCategoies
  courseId: Int!
  courseType: courseType
  name: String
  shortDescription: String
}

input updateGroupInput {
  groupId: Int!
  title: String
}

input updatePostInput {
  articleBody: String
  category: filteringCategoies
  description: String
  postId: Int!
  tags: [String]
  title: String
}

input updateStreamActivityArgs {
  streamId: Int
}

input updateUserInput {
  bio: String
  city: String
  email: String
  firstname: String
  lastname: String
  login: String
  shortDescription: String
  userId: Int
}
