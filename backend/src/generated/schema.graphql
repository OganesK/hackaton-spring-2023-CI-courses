### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Article {
  course: Course
  createdAt: DateTime!
  id: Int!
  post: Post
  sections(after: SectionWhereUniqueInput, before: SectionWhereUniqueInput, first: Int, last: Int, orderBy: [ArticleSectionsOrderByInput!]): [Section!]!
}

input ArticleOrderByWithRelationInput {
  cfId: SortOrder
  course: CourseOrderByWithRelationInput
  courseId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  post: PostOrderByWithRelationInput
  postID: SortOrder
  sections: SectionOrderByRelationAggregateInput
}

input ArticleSectionsOrderByInput {
  number: SortOrder
}

input ArticleWhereInput {
  AND: [ArticleWhereInput!]
  NOT: [ArticleWhereInput!]
  OR: [ArticleWhereInput!]
  cfId: IntNullableFilter
  course: CourseWhereInput
  courseId: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  post: PostWhereInput
  postID: IntNullableFilter
  sections: SectionListRelationFilter
}

type AuthPayload {
  token: String
  user: User
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Course {
  createdAt: DateTime!
  description: Article
  id: Int!
  name: String!
  poster: Media
  publishedPosts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, orderBy: [PostOrderByWithRelationInput!]): [Post!]!
  shortDescription: String!
}

input CourseListRelationFilter {
  every: CourseWhereInput
  none: CourseWhereInput
  some: CourseWhereInput
}

input CourseOrderByRelationAggregateInput {
  _count: SortOrder
}

input CourseOrderByWithRelationInput {
  Media: MediaOrderByRelationAggregateInput
  courseMedia: MediaOrderByRelationAggregateInput
  courseType: SortOrder
  createdAt: SortOrder
  description: ArticleOrderByWithRelationInput
  id: SortOrder
  name: SortOrder
  owner: UserOrderByWithRelationInput
  ownerId: SortOrder
  platformConfigShowed: PlatformConfigOrderByRelationAggregateInput
  poster: MediaOrderByWithRelationInput
  posterId: SortOrder
  publishedPosts: PostOrderByRelationAggregateInput
  shortDescription: SortOrder
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  Media: MediaListRelationFilter
  NOT: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  courseMedia: MediaListRelationFilter
  courseType: EnumcourseTypeEnumNullableFilter
  createdAt: DateTimeFilter
  description: ArticleWhereInput
  id: IntFilter
  name: StringFilter
  owner: UserWhereInput
  ownerId: IntFilter
  platformConfigShowed: PlatformConfigListRelationFilter
  poster: MediaWhereInput
  posterId: IntNullableFilter
  publishedPosts: PostListRelationFilter
  shortDescription: StringFilter
}

input CourseWhereUniqueInput {
  id: Int
}

input CreateArticleInput {
  postId: Int!
  sections: [CreateSectionInput]
}

input CreateDescriptionInput {
  projectId: Int!
  sections: [CreateDescriptionSectionInput]
}

input CreateDescriptionSectionInput {
  mediaURL: String
  number: Int!
  text: String
  type: enumSectionType!
}

input CreatePostInput {
  category: filteringCategoies!
  description: String!
  isNews: Boolean!
  isOffer: Boolean!
  isResource: Boolean!
  projectId: Int!
  tags: [String]!
  title: String!
}

input CreateSectionInput {
  mediaURL: String
  number: Int!
  text: String
  type: enumSectionType!
}

input CreateStoryInput {
  crowdFundingId: Int!
  sections: [CreateStorySectionInput]
}

input CreateStorySectionInput {
  mediaURL: String
  number: Int!
  text: String
  type: enumSectionType!
}

input CreateUserInput {
  email: String!
  firstname: String!
  lastname: String!
  login: String!
  password: String!
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DeleteArticleInput {
  articleId: Int!
}

input DeleteDescriptionInput {
  descriptionId: Int!
}

input DeleteStoryInput {
  storyId: Int!
}

input EnumcourseTypeEnumNullableFilter {
  equals: courseTypeEnum
  in: [courseTypeEnum!]
  not: NestedEnumcourseTypeEnumNullableFilter
  notIn: [courseTypeEnum!]
}

input EnummediaTypeFilter {
  equals: mediaType
  in: [mediaType!]
  not: NestedEnummediaTypeFilter
  notIn: [mediaType!]
}

input EnumsectionTypesFilter {
  equals: sectionTypes
  in: [sectionTypes!]
  not: NestedEnumsectionTypesFilter
  notIn: [sectionTypes!]
}

type Event {
  address: String!
  date: DateTime!
  description: String!
  format: String
  id: Int!
  name: String!
  organizer: String!
  platformConfigShowed(after: PlatformConfigWhereUniqueInput, before: PlatformConfigWhereUniqueInput, first: Int, last: Int): [PlatformConfig!]!
  poster: Media
  shortDescription: String!
  stream: Stream
  theme: String!
  user: User
}

input EventCreatedInput {
  address: String
  category: filteringCategoies!
  date: DateTime!
  description: String!
  format: String
  name: String!
  organizer: String!
  shortDescription: String!
  theme: String!
}

input EventListRelationFilter {
  every: EventWhereInput
  none: EventWhereInput
  some: EventWhereInput
}

input EventOrderByRelationAggregateInput {
  _count: SortOrder
}

input EventOrderByWithRelationInput {
  address: SortOrder
  date: SortOrder
  description: SortOrder
  format: SortOrder
  id: SortOrder
  name: SortOrder
  organizer: SortOrder
  platformConfigShowed: PlatformConfigOrderByRelationAggregateInput
  poster: MediaOrderByWithRelationInput
  posterId: SortOrder
  registeredForEvent: RegisteredForEventOrderByRelationAggregateInput
  shortDescription: SortOrder
  stream: StreamOrderByWithRelationInput
  theme: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input EventUpdatedInput {
  address: String
  category: filteringCategoies
  date: DateTime
  description: String
  eventId: Int!
  format: String
  name: String
  organizer: String
  shortDescription: String
  theme: String
}

input EventWhereInput {
  AND: [EventWhereInput!]
  NOT: [EventWhereInput!]
  OR: [EventWhereInput!]
  address: StringFilter
  date: DateTimeFilter
  description: StringFilter
  format: StringNullableFilter
  id: IntFilter
  name: StringFilter
  organizer: StringFilter
  platformConfigShowed: PlatformConfigListRelationFilter
  poster: MediaWhereInput
  posterId: IntNullableFilter
  registeredForEvent: RegisteredForEventListRelationFilter
  shortDescription: StringFilter
  stream: StreamWhereInput
  theme: StringFilter
  user: UserWhereInput
  userId: IntNullableFilter
}

input EventWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Media {
  createdAt: DateTime
  event(after: EventWhereUniqueInput, before: EventWhereUniqueInput, first: Int, last: Int): [Event!]!
  id: Int!
  link: String
  post(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [Post!]!
  postMedia: Post
  type: mediaType!
  user(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input MediaListRelationFilter {
  every: MediaWhereInput
  none: MediaWhereInput
  some: MediaWhereInput
}

input MediaOrderByRelationAggregateInput {
  _count: SortOrder
}

input MediaOrderByWithRelationInput {
  courseDescripiton: CourseOrderByWithRelationInput
  courseDescriptionId: SortOrder
  courseMedia: CourseOrderByWithRelationInput
  courseMediaId: SortOrder
  coursePoster: CourseOrderByRelationAggregateInput
  createdAt: SortOrder
  event: EventOrderByRelationAggregateInput
  id: SortOrder
  isApproved: SortOrder
  messagerGroup: MessagerGroupOrderByRelationAggregateInput
  post: PostOrderByRelationAggregateInput
  postMedia: PostOrderByWithRelationInput
  postMediaId: SortOrder
  section: SectionOrderByRelationAggregateInput
  type: SortOrder
  url: SortOrder
  user: UserOrderByRelationAggregateInput
}

input MediaWhereInput {
  AND: [MediaWhereInput!]
  NOT: [MediaWhereInput!]
  OR: [MediaWhereInput!]
  courseDescripiton: CourseWhereInput
  courseDescriptionId: IntNullableFilter
  courseMedia: CourseWhereInput
  courseMediaId: IntNullableFilter
  coursePoster: CourseListRelationFilter
  createdAt: DateTimeNullableFilter
  event: EventListRelationFilter
  id: IntFilter
  isApproved: BoolFilter
  messagerGroup: MessagerGroupListRelationFilter
  post: PostListRelationFilter
  postMedia: PostWhereInput
  postMediaId: IntNullableFilter
  section: SectionListRelationFilter
  type: EnummediaTypeFilter
  url: StringFilter
  user: UserListRelationFilter
}

input MediaWhereUniqueInput {
  id: Int
  url: String
}

type Message {
  createdAt: DateTime!
  group: MessagerGroup!
  id: Int!
  sender: User!
  text: String!
  updatedAt: DateTime!
}

input MessageListRelationFilter {
  every: MessageWhereInput
  none: MessageWhereInput
  some: MessageWhereInput
}

input MessageOrderByRelationAggregateInput {
  _count: SortOrder
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  createdAt: DateTimeFilter
  group: MessagerGroupWhereInput
  groupId: IntFilter
  id: IntFilter
  sender: UserWhereInput
  senderId: IntFilter
  text: StringFilter
  updatedAt: DateTimeFilter
}

input MessageWhereUniqueInput {
  id: Int
}

type MessagerGroup {
  admins(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  avatar: Media
  createdAt: DateTime!
  id: Int!
  inviteURL: String
  members(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  messages(after: MessageWhereUniqueInput, before: MessageWhereUniqueInput, first: Int, last: Int): [Message!]!
  title: String!
  type: String!
}

input MessagerGroupListRelationFilter {
  every: MessagerGroupWhereInput
  none: MessagerGroupWhereInput
  some: MessagerGroupWhereInput
}

input MessagerGroupOrderByRelationAggregateInput {
  _count: SortOrder
}

input MessagerGroupOrderByWithRelationInput {
  admins: UserOrderByRelationAggregateInput
  avatar: MediaOrderByWithRelationInput
  avatarId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  inviteURL: SortOrder
  members: UserOrderByRelationAggregateInput
  messages: MessageOrderByRelationAggregateInput
  title: SortOrder
  type: SortOrder
}

input MessagerGroupWhereInput {
  AND: [MessagerGroupWhereInput!]
  NOT: [MessagerGroupWhereInput!]
  OR: [MessagerGroupWhereInput!]
  admins: UserListRelationFilter
  avatar: MediaWhereInput
  avatarId: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  inviteURL: StringNullableFilter
  members: UserListRelationFilter
  messages: MessageListRelationFilter
  title: StringFilter
  type: StringFilter
}

input MessagerGroupWhereUniqueInput {
  id: Int
  inviteURL: String
}

type Mutation {
  addMembersToGroup(data: addMembersToGroupInput!): String
  articleCreateMutation(data: CreateArticleInput!): String
  articleDeleteMutation(data: DeleteArticleInput!): String
  articleUpdateMutation(data: UpdateArticleInput!): String
  createGroup(data: createGroupInput!): MessagerGroup
  createMedia(data: createMediaInput!): SignUrlResponse
  createOneCourse(data: createCourseInput!): Course
  createOneEvent(data: EventCreatedInput!): Event
  createOneTest(data: TestCreateInput!): Test!
  createStream(data: createStreamArgs!): Stream
  deleteGroup(data: deleteGroupInput!): String
  deleteMediaElement(data: deleteMediaElementInput!): String
  deleteOneCourse(where: CourseWhereUniqueInput!): Course
  deleteOneEvent(where: EventWhereUniqueInput!): Event
  deletePostMedia(data: deletePostMedia!): String
  deleteProjectPresentationMedia(data: deleteProjectPresentationMedia!): String
  descriptionCreateMutation(data: CreateDescriptionInput!): String
  descriptionDeleteMutation(data: DeleteDescriptionInput!): String
  descriptionUpdateMutation(data: UpdateDescriptionInput!): String
  leaveFromGroup(data: leaveFromGroupInput!): String
  putEventPoster(data: getMediaDataInput!): SignUrlResponse
  putPostMedia(data: getMediaDataInput!): SignUrlResponse
  putPostPoster(data: getMediaDataInput!): SignUrlResponse
  putProjectPoster(data: getMediaDataInput!): SignUrlResponse
  putProjectPresentationMedia(data: getMediaDataInput!): SignUrlResponse
  putUserAvatar(data: getMediaDataInput!): SignUrlResponse
  registerForEvent(data: RegisterForEventInput!): String
  removeGroupAdmin(data: removeGroupAdminInput!): String
  removeMembersFromGroup(data: removeMembersFromGroupInput!): String
  sendMessage(data: sendMessageInput!): Message
  sendStreamMessage(data: sendStreamMessageInput!): StreamMessage
  setGroupAdmin(data: setGroupAdminInput!): String
  signIn(data: SignInInput!): AuthPayload
  signUp(data: CreateUserInput!): AuthPayload
  storyCreateMutation(data: CreateStoryInput!): String
  storyDeleteMutation(data: DeleteStoryInput!): String
  storyUpdateMutation(data: UpdateStoryInput!): String
  switchToMessager(data: switchToMessagerInput!): MessagerGroup
  updateCourse(data: updateCourseInput!): String
  updateGroup(data: updateGroupInput!): MessagerGroup
  updateOneEvent(data: EventUpdatedInput!): String
  updateOneTest(data: TestUpdateInput!, where: TestWhereUniqueInput!): Test
  updateStream(data: createStreamArgs!): Stream
  updateStreamActivity(data: updateStreamActivityArgs!): Stream
  updateUserData(data: updateUserInput): User
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumcourseTypeEnumNullableFilter {
  equals: courseTypeEnum
  in: [courseTypeEnum!]
  not: NestedEnumcourseTypeEnumNullableFilter
  notIn: [courseTypeEnum!]
}

input NestedEnummediaTypeFilter {
  equals: mediaType
  in: [mediaType!]
  not: NestedEnummediaTypeFilter
  notIn: [mediaType!]
}

input NestedEnumsectionTypesFilter {
  equals: sectionTypes
  in: [sectionTypes!]
  not: NestedEnumsectionTypesFilter
  notIn: [sectionTypes!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type PlatformConfig {
  createdAt: DateTime!
  eventsShownOnLanding(after: EventWhereUniqueInput, before: EventWhereUniqueInput, first: Int, last: Int): [Event!]!
  id: Int!
  newsShownOnLanding(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [Post!]!
  offersShownOnLanding(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [Post!]!
  platformDescription: String!
  platformShortDescription: String!
  platformTagline: String!
  platformTitle: String!
  totalBudgetInvestment: Int!
  totalCompanyCount: Int!
  totalExtraBudgetInvestment: Int!
}

input PlatformConfigListRelationFilter {
  every: PlatformConfigWhereInput
  none: PlatformConfigWhereInput
  some: PlatformConfigWhereInput
}

input PlatformConfigOrderByRelationAggregateInput {
  _count: SortOrder
}

input PlatformConfigWhereInput {
  AND: [PlatformConfigWhereInput!]
  NOT: [PlatformConfigWhereInput!]
  OR: [PlatformConfigWhereInput!]
  coursesShownOnLanding: CourseListRelationFilter
  createdAt: DateTimeFilter
  eventsShownOnLanding: EventListRelationFilter
  id: IntFilter
  newsShownOnLanding: PostListRelationFilter
  offersShownOnLanding: PostListRelationFilter
  platformDescription: StringFilter
  platformShortDescription: StringFilter
  platformTagline: StringFilter
  platformTitle: StringFilter
  totalBudgetInvestment: IntFilter
  totalCompanyCount: IntFilter
  totalExtraBudgetInvestment: IntFilter
  totalcourseCount: IntFilter
}

input PlatformConfigWhereUniqueInput {
  id: Int
}

type Post {
  article: Article
  articleBody: String
  createdAt: DateTime!
  description: String!
  id: Int!
  isNews: Boolean!
  platformConfigNewsShowed(after: PlatformConfigWhereUniqueInput, before: PlatformConfigWhereUniqueInput, first: Int, last: Int): [PlatformConfig!]!
  platformConfigOffersShowed(after: PlatformConfigWhereUniqueInput, before: PlatformConfigWhereUniqueInput, first: Int, last: Int): [PlatformConfig!]!
  postMedia(after: MediaWhereUniqueInput, before: MediaWhereUniqueInput, first: Int, last: Int): [Media!]!
  poster: Media
  tags: [String!]!
  title: String!
}

input PostCreateInput {
  articleBody: String!
  category: filteringCategoies!
  description: String!
  isNews: Boolean!
  isOffer: Boolean!
  isResource: Boolean!
  projectId: Int!
  tags: [String]!
  title: String!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostOrderByWithRelationInput {
  article: ArticleOrderByWithRelationInput
  articleBody: SortOrder
  authorID: SortOrder
  course: CourseOrderByWithRelationInput
  courseID: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isNews: SortOrder
  platformConfigNewsShowed: PlatformConfigOrderByRelationAggregateInput
  platformConfigOffersShowed: PlatformConfigOrderByRelationAggregateInput
  postMedia: MediaOrderByRelationAggregateInput
  poster: MediaOrderByWithRelationInput
  posterId: SortOrder
  tags: SortOrder
  title: SortOrder
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  article: ArticleWhereInput
  articleBody: StringNullableFilter
  authorID: IntNullableFilter
  course: CourseWhereInput
  courseID: IntNullableFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: IntFilter
  isNews: BoolFilter
  platformConfigNewsShowed: PlatformConfigListRelationFilter
  platformConfigOffersShowed: PlatformConfigListRelationFilter
  postMedia: MediaListRelationFilter
  poster: MediaWhereInput
  posterId: IntNullableFilter
  tags: StringNullableListFilter
  title: StringFilter
}

input PostWhereUniqueInput {
  id: Int
}

type Query {
  course(where: CourseWhereUniqueInput!): Course
  courses(after: CourseWhereUniqueInput, before: CourseWhereUniqueInput, first: Int, last: Int, orderBy: [CourseOrderByWithRelationInput!], where: CourseWhereInput): [Course!]!
  event(where: EventWhereUniqueInput!): Event
  events(after: EventWhereUniqueInput, before: EventWhereUniqueInput, first: Int, last: Int, orderBy: [EventOrderByWithRelationInput!], where: EventWhereInput): [Event!]!
  getMessageInGroup(data: getMessageInGroupInput!): MessagerGroup
  getMessageInStream(data: getMessageInStreamInput!): [StreamMessage]
  getMyGroups: [MessagerGroup]
  getPlatformConfig: PlatformConfig
  getUsersInGroup(data: getUsersInGroupInput!): [User]
  getUsersWhichCanAddToGroup(data: getUsersWhichCantAddToGroupInput!): [User]
  me: User
  media(after: MediaWhereUniqueInput, before: MediaWhereUniqueInput, first: Int, last: Int, where: MediaWhereInput): [Media!]!
  post(where: PostWhereUniqueInput!): Post
  postQuery(data: postQueryInput!): Post
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, orderBy: [PostOrderByWithRelationInput!], where: PostWhereInput): [Post!]!
  registeredForEvents(after: RegisteredForEventWhereUniqueInput, before: RegisteredForEventWhereUniqueInput, first: Int, last: Int): [RegisteredForEvent!]!
  stream(where: StreamWhereUniqueInput!): Stream
  streams(after: StreamWhereUniqueInput, before: StreamWhereUniqueInput, first: Int, last: Int): [Stream!]!
  test(where: TestWhereUniqueInput!): Test
  tests(after: TestWhereUniqueInput, before: TestWhereUniqueInput, first: Int, last: Int): [Test!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: [UserOrderByWithRelationInput!], where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

input RegisterForEventInput {
  email: String!
  eventId: Int!
  name: String!
  surname: String!
  verdict: registeredVerdict
}

type RegisteredForEvent {
  email: String!
  event: Event!
  id: Int!
  name: String!
  surname: String!
}

input RegisteredForEventListRelationFilter {
  every: RegisteredForEventWhereInput
  none: RegisteredForEventWhereInput
  some: RegisteredForEventWhereInput
}

input RegisteredForEventOrderByRelationAggregateInput {
  _count: SortOrder
}

input RegisteredForEventWhereInput {
  AND: [RegisteredForEventWhereInput!]
  NOT: [RegisteredForEventWhereInput!]
  OR: [RegisteredForEventWhereInput!]
  email: StringFilter
  event: EventWhereInput
  eventId: IntFilter
  id: IntFilter
  name: StringFilter
  surname: StringFilter
}

input RegisteredForEventWhereUniqueInput {
  id: Int
}

type Section {
  article: Article!
  id: Int!
  media: Media
  number: Int!
  text: String
  type: sectionTypes!
}

input SectionListRelationFilter {
  every: SectionWhereInput
  none: SectionWhereInput
  some: SectionWhereInput
}

input SectionOrderByRelationAggregateInput {
  _count: SortOrder
}

input SectionWhereInput {
  AND: [SectionWhereInput!]
  NOT: [SectionWhereInput!]
  OR: [SectionWhereInput!]
  article: ArticleWhereInput
  articleID: IntFilter
  id: IntFilter
  media: MediaWhereInput
  mediaID: IntNullableFilter
  number: IntFilter
  text: StringNullableFilter
  type: EnumsectionTypesFilter
}

input SectionWhereUniqueInput {
  id: Int
}

input SignInInput {
  login: String!
  password: String!
}

type SignUrlEventPoster {
  fileName: String
  signedURL: String
}

type SignUrlPostPoster {
  fileName: String
  signedURL: String
}

type SignUrlProjectPoster {
  fileName: String
  signedURL: String
}

type SignUrlProjectPresentationMedia {
  fileName: String
  signedURL: String
}

type SignUrlResponse {
  fileName: String
  mediaId: Int
  mediaURL: String
  signedURL: String
}

type SignUrlUserAvatar {
  fileName: String
  signedURL: String
}

enum SortOrder {
  asc
  desc
}

type Stream {
  active: Boolean!
  event: Event
  id: Int!
  streamKey: String!
}

type StreamMessage {
  createdAt: DateTime!
  id: Int!
  sender: User!
  text: String!
}

input StreamMessageListRelationFilter {
  every: StreamMessageWhereInput
  none: StreamMessageWhereInput
  some: StreamMessageWhereInput
}

input StreamMessageOrderByRelationAggregateInput {
  _count: SortOrder
}

input StreamMessageWhereInput {
  AND: [StreamMessageWhereInput!]
  NOT: [StreamMessageWhereInput!]
  OR: [StreamMessageWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  sender: UserWhereInput
  senderId: IntFilter
  stream: StreamWhereInput
  streamId: IntFilter
  text: StringFilter
}

input StreamOrderByWithRelationInput {
  active: SortOrder
  event: EventOrderByWithRelationInput
  eventId: SortOrder
  id: SortOrder
  streamKey: SortOrder
  streamMessage: StreamMessageOrderByRelationAggregateInput
}

input StreamWhereInput {
  AND: [StreamWhereInput!]
  NOT: [StreamWhereInput!]
  OR: [StreamWhereInput!]
  active: BoolFilter
  event: EventWhereInput
  eventId: IntNullableFilter
  id: IntFilter
  streamKey: StringFilter
  streamMessage: StreamMessageListRelationFilter
}

input StreamWhereUniqueInput {
  eventId: Int
  id: Int
  streamKey: String
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

type Subscription {
  newMessage(data: subscriptionMessageInGroup!): Message
  streamChat(data: subscriptionMessageInStream!): StreamMessage
}

input TaskCreateManyTestInput {
  answers: TaskCreateManyanswersInput
  id: Int
  question: String!
}

input TaskCreateManyTestInputEnvelope {
  data: [TaskCreateManyTestInput!]
  skipDuplicates: Boolean
}

input TaskCreateManyanswersInput {
  set: [String!]
}

input TaskCreateNestedManyWithoutTestInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutTestInput!]
  create: [TaskCreateWithoutTestInput!]
  createMany: TaskCreateManyTestInputEnvelope
}

input TaskCreateOrConnectWithoutTestInput {
  create: TaskCreateWithoutTestInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateWithoutTestInput {
  answers: TaskCreateanswersInput
  question: String!
}

input TaskCreateanswersInput {
  set: [String!]
}

input TaskScalarWhereInput {
  AND: [TaskScalarWhereInput!]
  NOT: [TaskScalarWhereInput!]
  OR: [TaskScalarWhereInput!]
  answers: StringNullableListFilter
  id: IntFilter
  question: StringFilter
  testId: IntFilter
}

input TaskUpdateManyMutationInput {
  answers: TaskUpdateanswersInput
  question: StringFieldUpdateOperationsInput
}

input TaskUpdateManyWithWhereWithoutTestInput {
  data: TaskUpdateManyMutationInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateManyWithoutTestInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutTestInput!]
  create: [TaskCreateWithoutTestInput!]
  createMany: TaskCreateManyTestInputEnvelope
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutTestInput!]
  updateMany: [TaskUpdateManyWithWhereWithoutTestInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutTestInput!]
}

input TaskUpdateWithWhereUniqueWithoutTestInput {
  data: TaskUpdateWithoutTestInput!
  where: TaskWhereUniqueInput!
}

input TaskUpdateWithoutTestInput {
  answers: TaskUpdateanswersInput
  question: StringFieldUpdateOperationsInput
}

input TaskUpdateanswersInput {
  push: String
  set: [String!]
}

input TaskUpsertWithWhereUniqueWithoutTestInput {
  create: TaskCreateWithoutTestInput!
  update: TaskUpdateWithoutTestInput!
  where: TaskWhereUniqueInput!
}

input TaskWhereUniqueInput {
  id: Int
}

type Test {
  id: Int!
  name: String!
}

input TestCreateInput {
  name: String!
  tasks: TaskCreateNestedManyWithoutTestInput
}

input TestUpdateInput {
  name: StringFieldUpdateOperationsInput
  tasks: TaskUpdateManyWithoutTestInput
}

input TestWhereUniqueInput {
  id: Int
}

input UpdateArticleInput {
  articleId: Int!
  sections: [CreateSectionInput]
}

input UpdateDescriptionInput {
  descriptionId: Int!
  sections: [CreateDescriptionSectionInput]
}

input UpdatePostInput {
  category: filteringCategoies
  description: String
  postId: Int!
  tags: [String]
  title: String
}

input UpdateStoryInput {
  sections: [CreateStorySectionInput]
  storyId: Int!
}

type User {
  avatar: Media
  bio: String
  city: String
  createdAt: DateTime!
  email: String!
  firstname: String!
  groups(after: MessagerGroupWhereUniqueInput, before: MessagerGroupWhereUniqueInput, first: Int, last: Int, orderBy: [MessagerGroupOrderByWithRelationInput!]): [MessagerGroup!]!
  id: Int!
  lastname: String!
  login: String!
  messages(after: MessageWhereUniqueInput, before: MessageWhereUniqueInput, first: Int, last: Int): [Message!]!
  password: String!
  publishedEvent(after: EventWhereUniqueInput, before: EventWhereUniqueInput, first: Int, last: Int, orderBy: [EventOrderByWithRelationInput!]): [Event!]!
  shortDescription: String
  tokenVersion: Int
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithRelationInput {
  StreamMessage: StreamMessageOrderByRelationAggregateInput
  avatar: MediaOrderByWithRelationInput
  avatarId: SortOrder
  bio: SortOrder
  city: SortOrder
  courses: CourseOrderByRelationAggregateInput
  createdAt: SortOrder
  email: SortOrder
  firstname: SortOrder
  groupAdmins: MessagerGroupOrderByRelationAggregateInput
  groups: MessagerGroupOrderByRelationAggregateInput
  id: SortOrder
  lastname: SortOrder
  login: SortOrder
  messages: MessageOrderByRelationAggregateInput
  password: SortOrder
  publishedEvent: EventOrderByRelationAggregateInput
  shortDescription: SortOrder
  tokenVersion: SortOrder
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  StreamMessage: StreamMessageListRelationFilter
  avatar: MediaWhereInput
  avatarId: IntNullableFilter
  bio: StringNullableFilter
  city: StringNullableFilter
  courses: CourseListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  firstname: StringFilter
  groupAdmins: MessagerGroupListRelationFilter
  groups: MessagerGroupListRelationFilter
  id: IntFilter
  lastname: StringFilter
  login: StringFilter
  messages: MessageListRelationFilter
  password: StringFilter
  publishedEvent: EventListRelationFilter
  shortDescription: StringNullableFilter
  tokenVersion: IntNullableFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
  login: String
}

input addMembersToGroupInput {
  groupId: Int!
  membersIds: [Int]
}

enum businessModel {
  B2B
  B2B2C
  B2C
  B2G
  C2C
  G2B
  G2C
}

input connectMediaInput {
  entityId: Int!
  entityType: entityTypes!
  mediaURL: String!
}

enum courseMarket {
  AeroNet
  AeroNext
  AutoNet
  EcoNet
  EduNet
  EnergyNet
  FoodNet
  GameNet
  HealthNet
  HomeNet
  Marinet
  NeuroNet
  SafeNet
  SpaceNet
  SportNet
  TechNet
  WearNet
}

enum courseStage {
  ideaOrConcept
  prototypeOrMVP
  scaling
  workingProduct
}

enum courseType {
  hardwareAndSoftwareComplex
  hardwareSolution
  initiativeOfTheRegion
  notDefined
  service
  softwareSolution
  technology
}

enum courseTypeEnum {
  hardwareAndSoftwareComplex
  hardwareSolution
  initiativeOfTheRegion
  notDefined
  service
  softwareSolution
  technology
}

input createCourseInput {
  category: filteringCategoies!
  courseType: courseType
  name: String!
  ownerID: Int!
  shortDescription: String!
}

input createGroupInput {
  membersIds: [Int]
  title: String!
}

input createInviteInput {
  groupId: Int!
}

input createMediaInput {
  entityId: Int
  entityType: entityTypes
  fileType: String!
}

input createStreamArgs {
  eventId: Int
}

input deleteGroupInput {
  groupId: Int!
}

input deleteMediaElementInput {
  mediaURL: String!
}

input deletePostMedia {
  mediaUrl: String!
}

input deleteProjectPresentationMedia {
  mediaUrl: String!
}

input deleteUserInput {
  userId: Int!
}

enum entityTypes {
  courseMaterial
  coursePoster
}

enum enumPostCategory {
  news
  offer
  resource
}

enum enumSectionType {
  image
  text
  video
}

enum filteringCategoies {
  IT
  analytic
  business
  content
  design
  development
  education
  management
}

input getMediaDataInput {
  entityId: Int
  fileName: String
  fileType: String
}

input getMessageInGroupInput {
  groupId: Int!
}

input getMessageInStreamInput {
  streamId: Int!
}

input getUsersInGroupInput {
  groupId: Int!
}

input getUsersWhichCantAddToGroupInput {
  groupId: Int!
}

enum investmentStage {
  angels
  ownInvestments
  preSeed
  seed
  stageA
  stageB
  stageC
}

input leaveFromGroupInput {
  groupId: Int!
}

enum mainGoal {
  biometricsTasks
  computerVisionTasks
  dataMiningTasks
  humanSpeechProcessingTasks
  naturalLanguageProcessingTasks
  tasksOfRecommendationSystems
}

enum mediaType {
  image
  video
}

input postQueryInput {
  postId: Int
}

enum registeredVerdict {
  maybe
  yes
}

input removeGroupAdminInput {
  groupId: Int!
  membersIds: [Int!]
}

input removeMemberFromGroupInput {
  groupId: Int!
  memberId: Int!
}

input removeMembersFromGroupInput {
  groupId: Int!
  membersIds: [Int]
}

enum salesType {
  firstSales
  noSales
  systemSales
}

enum sectionTypes {
  image
  text
  video
}

input sendMessageInput {
  groupId: Int!
  senderId: Int!
  text: String!
}

input sendStreamMessageInput {
  senderId: Int!
  streamId: Int!
  text: String!
}

input setGroupAdminInput {
  groupId: Int!
  membersIds: [Int!]
}

input subscriptionMessageInGroup {
  groupId: Int!
}

input subscriptionMessageInStream {
  streamId: Int!
}

input switchToMessagerInput {
  recipientId: Int!
  senderId: Int!
}

enum technologyType {
  Prototyping3D
  additiveTechnologies
  artificialIntelligence
  bigDataStorageAndAnalysisTechnologies
  bionics
  carbonFootprintManagement
  collaborativeTechnologies
  distributedRegistryTechnologies
  genobionics
  geoinformationSystems
  greenEnergy
  hydrogenTechnologies
  informationSecurityTechnologies
  machineLearningAndCognitiveTechnologies
  molecularEngineering
  neurotechnologiesVirtualTechnologies
  newProductionTechnologies
  personalizedMedicine
  photonics
  powerPlants
  quantumCommunicationTechnologies
  quantumTechnologies
  renewableMaterialsAndWasteRecycling
  sensorTechnology
  syntheticBiology
  technologiesForControllingBiologicalObjects
  technologiesForCreatingNewAndPortableEnergySources
  technologiesOfElectricPowerTransportation
  technologiesOfModeling
  technologiesOfRoboticsAndMechatronics
  wirelessCommunicationTechnologies
}

input updateCourseInput {
  category: filteringCategoies
  courseId: Int!
  courseType: courseType
  name: String
  shortDescription: String
}

input updateGroupInput {
  groupId: Int!
  title: String
}

input updatePostInput {
  articleBody: String
  category: filteringCategoies
  description: String
  postId: Int!
  tags: [String]
  title: String
}

input updateStreamActivityArgs {
  streamId: Int
}

input updateUserInput {
  bio: String
  city: String
  email: String
  firstname: String
  lastname: String
  login: String
  shortDescription: String
  userId: Int
}
